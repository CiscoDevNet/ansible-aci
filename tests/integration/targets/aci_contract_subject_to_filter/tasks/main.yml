# Test code for the ACI modules
# Copyright: (c) 2017, Jacob McGill (@jmcgill298)

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: Verify Cloud and Non-Cloud Sites in use.
  include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Set vars
  set_fact:
    aci_info: &aci_info
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: '{{ aci_output_level | default("info") }}'

- name: Assure tenant removal after tests
  block:
    - name: ensure tenant is deleted for clean state
      cisco.aci.aci_tenant:
        <<: *aci_info
        tenant: anstest
        state: absent
      register: tenant_present

    - name: ensure tenant exists for tests to kick off
      cisco.aci.aci_tenant: &aci_tenant_present
        <<: *aci_info
        tenant: anstest
        state: present
      register: tenant_present

    - name: ensure filter exists for tests to kick off
      cisco.aci.aci_filter: &aci_filter_present
        <<: *aci_tenant_present
        filter: anstest
      register: filter_present

    - name: ensure filter exists for tests to kick off
      cisco.aci.aci_filter: &aci_filter_present_2
        <<: *aci_tenant_present
        filter: anstest2
      register: filter_present_2

    - name: ensure contract exists for tests to kick off
      cisco.aci.aci_contract: &aci_contract_present
        <<: *aci_tenant_present
        contract: anstest
      register: contract_present

    - name: ensure subject exists for tests to kick off
      cisco.aci.aci_contract_subject: &aci_subject_present
        <<: *aci_contract_present
        subject: anstest
      register: subject_present

    - name: create subject filter binding - check mode works
      cisco.aci.aci_contract_subject_to_filter: &aci_subject_filter_present
        <<: *aci_subject_present
        filter: anstest
        log: log
      check_mode: yes
      register: subject_filter_present_check_mode

    - name: create subject filter binding - creation works
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_subject_filter_present
      register: subject_filter_present

    - name: create subject filter binding - additional testing
      cisco.aci.aci_contract_subject_to_filter: &aci_subject_filter_present_2
        <<: *aci_subject_filter_present
        filter: anstest2
      register: subject_filter_present_2

    - name: create subject filter binding - idempotency works
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_subject_filter_present
      register: subject_filter_present_idempotent

    - name: update subject filter binding - update works
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_subject_filter_present
        log: none
      register: subject_filter_update

    - name: missing param - failure message works
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_tenant_present
      ignore_errors: yes
      register: present_missing_param

    - name: present assertions
      assert:
        that:
          - subject_filter_present_check_mode is changed
          - subject_filter_present_check_mode.previous == []
          - subject_filter_present_check_mode.sent.vzRsSubjFiltAtt.attributes.directives == 'log'
          - subject_filter_present_check_mode.sent.vzRsSubjFiltAtt.attributes.tnVzFilterName == 'anstest'
          - subject_filter_present is changed
          - subject_filter_present.previous == []
          - subject_filter_present.sent == subject_filter_present_check_mode.sent
          - subject_filter_present.current.0.vzRsSubjFiltAtt.attributes.annotation == 'orchestrator:ansible'
          - subject_filter_present_2 is changed
          - subject_filter_present_idempotent is not changed
          - subject_filter_present_idempotent.previous != []
          - subject_filter_update is changed
          - subject_filter_update.sent.vzRsSubjFiltAtt.attributes.directives == ''
          - present_missing_param is failed
          - 'present_missing_param.msg == "state is present but all of the following are missing: contract, filter, subject"'

    - name: query all
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_tenant_present
        state: query
        tenant: "{{ fakevar | default(omit) }}"
      register: query_all

    - name: query binding
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_subject_filter_present
        state: query
      register: query_binding

    - name: query assertions
      assert:
        that:
          - query_all is not changed
          - query_all.current | length > 1
          - query_all.current.0.vzRsSubjFiltAtt is defined
          - query_binding is not changed
          - query_binding.current != []

    - name: delete subject filter binding - check mode works
      cisco.aci.aci_contract_subject_to_filter: &aci_subject_filter_absent
        <<: *aci_subject_filter_present
        state: absent
      check_mode: yes
      register: subject_filter_absent_check_mode

    - name: delete subject filter binding - deletion works
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_subject_filter_absent
      register: subject_filter_absent

    - name: delete subject filter binding - idempotency works
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_subject_filter_absent
      register: subject_filter_absent_idempotent

    - name: missing param - failure message works
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_subject_filter_absent
        filter: "{{ fakevar | default(omit) }}"
      ignore_errors: yes
      register: absent_missing_param

    - name: cleanup subject filter binding
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_subject_filter_present_2
        state: absent

    - name: absent assertions
      assert:
        that:
          - subject_filter_absent_check_mode is changed
          - subject_filter_absent_check_mode.proposed == {}
          - subject_filter_absent_check_mode.previous != []
          - subject_filter_absent is changed
          - subject_filter_absent.previous != []
          - subject_filter_absent_idempotent is not changed
          - subject_filter_absent_idempotent.previous == []
          - absent_missing_param is failed
          - 'absent_missing_param.msg == "state is absent but all of the following are missing: filter"'

    - name: create subject filter with direction both as default
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_subject_present
        filter: anstest
        action: permit
        directive: log
        priority_override: level1
        state: present
      register: filter_present_default

    - name: create subject filter with direction provider to consumer
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_subject_present
        filter: anstest
        action: permit
        directive: no_stats
        priority_override: level2
        direction: provider_to_consumer
        state: present
      register: filter_present_p2c

    - name: create subject filter with direction consumer to provider
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_subject_present
        filter: anstest
        action: permit
        directive: none
        priority_override: level3
        direction: consumer_to_provider
        state: present
      register: filter_present_c2p

    - name: create subject filter with direction both set
      cisco.aci.aci_contract_subject_to_filter:
        <<: *aci_subject_present
        filter: anstest
        action: permit
        directive: no_stats
        priority_override: default
        direction: both
        state: present
      register: filter_present_both

    - name: filter subject with direction assertions
      assert:
        that:
          - filter_present_default is changed
          - filter_present_default.current.0.vzRsSubjFiltAtt.attributes.action == "permit"
          - filter_present_default.current.0.vzRsSubjFiltAtt.attributes.tnVzFilterName == "anstest"
          - filter_present_default.current.0.vzRsSubjFiltAtt.attributes.priorityOverride == "level1"
          - filter_present_default.current.0.vzRsSubjFiltAtt.attributes.directives == "log"
          - filter_present_p2c is changed
          - filter_present_p2c.current.0.vzRsFiltAtt.attributes.action == "permit"
          - filter_present_p2c.current.0.vzRsFiltAtt.attributes.tnVzFilterName == "anstest"
          - filter_present_p2c.current.0.vzRsFiltAtt.attributes.priorityOverride == "level2"
          - filter_present_p2c.current.0.vzRsFiltAtt.attributes.directives == "no_stats"
          - filter_present_c2p is changed
          - filter_present_c2p.current.0.vzRsFiltAtt.attributes.action == "permit"
          - filter_present_c2p.current.0.vzRsFiltAtt.attributes.tnVzFilterName == "anstest"
          - filter_present_c2p.current.0.vzRsFiltAtt.attributes.priorityOverride == "level3"
          - filter_present_c2p.current.0.vzRsFiltAtt.attributes.directives == ""
          - filter_present_both is changed
          - filter_present_both.current.0.vzRsSubjFiltAtt.attributes.action == "permit"
          - filter_present_both.current.0.vzRsSubjFiltAtt.attributes.tnVzFilterName == "anstest"
          - filter_present_both.current.0.vzRsSubjFiltAtt.attributes.priorityOverride == "default"
          - filter_present_both.current.0.vzRsSubjFiltAtt.attributes.directives == "no_stats"

    - name: Execute tasks only for non-cloud sites
      when: query_cloud.current == []  # This condition will execute only non-cloud sites
      block:  # block specifies execution of tasks within, based on conditions
      - name: create subject filter with action deny for non-cloud
        cisco.aci.aci_contract_subject_to_filter:
          <<: *aci_subject_present
          filter: anstest
          action: deny
          state: present
        register: filter_present_deny_non_cloud

      - name: filter subject with direction assertions
        assert:
          that:
            - filter_present_deny_non_cloud is changed
            - filter_present_deny_non_cloud.current.0.vzRsSubjFiltAtt.attributes.action == "deny"

    - name: Execute tasks only for cloud sites
      when: query_cloud.current | length > 0  # This condition will execute only cloud sites
      block:  # block specifies execution of tasks within, based on conditions
      - name: create subject filter with action deny casues error for cloud
        cisco.aci.aci_contract_subject_to_filter:
          <<: *aci_subject_present
          filter: anstest
          action: deny
          priority_override: level1
          state: present
        register: filter_present_deny_cloud
        ignore_errors: yes

    - name: cloud assertions
      assert:
        that:
          - filter_present_deny_cloud.msg.startswith("APIC Error 1: Invalid Configuration CLOUD_ONLY_PERMIT_ACTION_SUPPORTED")
  always:
    - name: cleanup tenant
      cisco.aci.aci_tenant:
        <<: *aci_tenant_present
        state: absent
      when: tenant_present is changed
