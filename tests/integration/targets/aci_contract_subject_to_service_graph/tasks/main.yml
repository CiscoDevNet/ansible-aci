# Test code for the ACI modules
# Copyright: (c) 2017, Jacob McGill (@jmcgill298)

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: ensure tenant exists for tests to kick off
  cisco.aci.aci_tenant: &aci_tenant_present
    host: "{{ aci_hostname }}"
    username: "{{ aci_username }}"
    password: "{{ aci_password }}"
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    tenant: ansible_test
    state: present
  register: tenant_present

# CLEAN ENVIRONMENT
- name: ensure contract is removed
  cisco.aci.aci_contract:
    <<: *aci_tenant_present
    contract: anstest
    state: absent
  ignore_errors: true

- name: ensure contract exists for tests to kick off
  cisco.aci.aci_contract: &aci_contract_present
    <<: *aci_tenant_present
    contract: anstest
  register: contract_present

- name: ensure subject exists for tests to kick off
  cisco.aci.aci_contract_subject: &aci_subject_present
    <<: *aci_contract_present
    subject: anstest
  register: subject_present

- name: create subject service graph binding - check mode works
  cisco.aci.aci_contract_subject_to_service_graph: &aci_subject_service_graph_present
    <<: *aci_subject_present
    service_graph: anstest
  check_mode: true
  register: subject_service_graph_present_check_mode

- name: create subject service graph binding - creation works
  cisco.aci.aci_contract_subject_to_service_graph:
    <<: *aci_subject_service_graph_present
  register: subject_service_graph_present

- name: create subject service graph binding - idempotency works
  cisco.aci.aci_contract_subject_to_service_graph:
    <<: *aci_subject_service_graph_present
  register: subject_service_graph_present_idempotent

- name: update subject service graph binding - update works
  cisco.aci.aci_contract_subject_to_service_graph:
    <<: *aci_subject_service_graph_present
    service_graph: anstest2
  register: subject_service_graph_update

- name: missing param - failure message works
  cisco.aci.aci_contract_subject_to_service_graph:
    <<: *aci_tenant_present
  ignore_errors: true
  register: present_missing_param

- name: present assertions
  assert:
    that:
      - subject_service_graph_present_check_mode is changed
      - subject_service_graph_present_check_mode.previous == []
      - subject_service_graph_present_check_mode.sent.vzRsSubjGraphAtt.attributes.tnVnsAbsGraphName == 'anstest'
      - subject_service_graph_present is changed
      - subject_service_graph_present.previous == []
      - subject_service_graph_present.sent == subject_service_graph_present_check_mode.sent
      - subject_service_graph_present_idempotent is not changed
      - subject_service_graph_present_idempotent.previous != []
      - subject_service_graph_present.current.0.vzRsSubjGraphAtt.attributes.annotation == 'orchestrator:ansible'
      - subject_service_graph_update is changed
      - subject_service_graph_update.sent.vzRsSubjGraphAtt.attributes.tnVnsAbsGraphName == 'anstest2'
      - present_missing_param is failed
      - 'present_missing_param.msg == "state is present but all of the following are missing: contract, service_graph, subject"'

- name: query all
  cisco.aci.aci_contract_subject_to_service_graph:
    <<: *aci_tenant_present
    state: query
    tenant: "{{ fakevar | default(omit) }}"
  register: query_all

- name: query binding
  cisco.aci.aci_contract_subject_to_service_graph:
    <<: *aci_subject_service_graph_present
    state: query
  register: query_binding

- name: query assertions
  assert:
    that:
      - query_all is not changed
      - query_all.current | length > 0
      - query_all.current.0.vzRsSubjGraphAtt is defined
      - query_binding is not changed
      - query_binding.current != []

- name: delete subject service graph binding - check mode works
  cisco.aci.aci_contract_subject_to_service_graph: &aci_subject_service_graph_absent
    <<: *aci_subject_service_graph_present
    state: absent
  check_mode: true
  register: subject_service_graph_absent_check_mode

- name: delete subject service graph binding - deletion works
  cisco.aci.aci_contract_subject_to_service_graph:
    <<: *aci_subject_service_graph_absent
  register: subject_service_graph_absent

- name: delete subject service graph binding - idempotency works
  cisco.aci.aci_contract_subject_to_service_graph:
    <<: *aci_subject_service_graph_absent
  register: subject_service_graph_absent_idempotent

- name: missing param - failure message works
  cisco.aci.aci_contract_subject_to_service_graph:
    <<: *aci_subject_service_graph_absent
    service_graph: "{{ fakevar | default(omit) }}"
  ignore_errors: true
  register: absent_missing_param

- name: absent assertions
  assert:
    that:
      - subject_service_graph_absent_check_mode is changed
      - subject_service_graph_absent_check_mode.proposed == {}
      - subject_service_graph_absent_check_mode.previous != []
      - subject_service_graph_absent is changed
      - subject_service_graph_absent.previous != []
      - subject_service_graph_absent_idempotent is not changed
      - subject_service_graph_absent_idempotent.previous == []
      - absent_missing_param is failed
      - 'absent_missing_param.msg == "state is absent but all of the following are missing: service_graph"'

- name: cleanup contract
  cisco.aci.aci_contract:
    <<: *aci_contract_present
    state: absent
  when: contract_present is changed

- name: cleanup tenant
  cisco.aci.aci_tenant:
    <<: *aci_tenant_present
    state: absent
  when: tenant_present is changed