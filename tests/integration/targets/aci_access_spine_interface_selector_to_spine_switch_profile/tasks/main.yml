# Test code for the ACI modules
# Copyright: (c) 2017, Bruno Calogero <brunocalogero@hotmail.com>
# Adapted from aci_interface_selector_to_switch_policy_leaf_profile
# Copyright: (c) 2023, Eric Girard <@netgirard>
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: Set vars
  set_fact: 
   aci_info: &aci_info
    host: "{{ aci_hostname }}"
    username: "{{ aci_username }}"
    password: "{{ aci_password }}"
    validate_certs: "{{ aci_validate_certs | default(false) }}"
    use_ssl: "{{ aci_use_ssl | default(true) }}"
    use_proxy: "{{ aci_use_proxy | default(true) }}"
    output_level: "{{ aci_output_level | default('info') }}"

- name: Verify Cloud and Non-Cloud Sites in use.
  include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Execute tasks only for non-cloud sites
  when: query_cloud.current == []  # This condition will execute only non-cloud sites
  block:  # block specifies execution of tasks within, based on conditions
  - name: delete Switch Policy Leaf profile for kick off
    cisco.aci.aci_access_spine_switch_profile:
      <<: *aci_info
      spine_profile: swspineprftest
      state: absent

  - name: delete Interface Policy Leaf profile for kick off
    cisco.aci.aci_access_spine_interface_profile:
      <<: *aci_info
      spine_interface_profile: spineintprftest
      state: absent

  - name: Ensuring Switch Policy Leaf profile exists for kick off
    cisco.aci.aci_access_spine_switch_profile: &aci_access_spine_switch_profile_present
      <<: *aci_info
      spine_profile: swspineprftest
      state: present
    register: spine_profile_present

  - name: Ensuring Interface Policy Leaf profile exists for kick off
    cisco.aci.aci_access_spine_interface_profile: &aci_access_spine_interface_profile_present
      <<: *aci_info
      state: present
    register: spine_profile_present

  - name: Bind an Interface Selector to a Switch Policy Leaf Profile - check mode works
    cisco.aci.aci_access_spine_interface_selector_to_spine_switch_profile: &aci_access_spine_interface_selector_to_spine_switch_profile_present
      <<: *aci_access_spine_switch_profile_present
      interface_selector: spineintprftest
    check_mode: yes
    register: intftospine_check_mode_present

  - name: Bind an Interface Selector to a Switch Policy Leaf Profile - creation works
    cisco.aci.aci_access_spine_interface_selector_to_spine_switch_profile:
      <<: *aci_access_spine_interface_selector_to_spine_switch_profile_present
    register: intftospine_present

  - name: Bind an Interface Selector to a Switch Policy Leaf Profile - idempotency works
    cisco.aci.aci_access_spine_interface_selector_to_spine_switch_profile:
      <<: *aci_access_spine_interface_selector_to_spine_switch_profile_present
    register: intftospine_idempotent

  # TODO: also test for errors
  - name: present assertions
    assert:
      that:
      - intftospine_check_mode_present is changed
      - intftospine_present is changed
      - intftospine_present.previous == []
      - intftospine_present.sent.infraRsSpAccPortP.attributes.tDn == 'uni/infra/spaccportprof-spineintprftest'
      - intftospine_present.current.0.infraRsSpAccPortP.attributes.annotation == 'orchestrator:ansible'
      - intftospine_idempotent is not changed
      - intftospine_idempotent.sent == {}

  - name: Query an interface selector profile associated with a switch policy spine profile
    cisco.aci.aci_access_spine_interface_selector_to_spine_switch_profile:
      <<: *aci_access_spine_switch_profile_present
      interface_selector: spineintprftest
      state: query
    register: binding_query1

  - name: query 1 assertions
    assert:
      that:
        - binding_query1 is not changed
        - binding_query1.current | length >= 1
        - '"api/mo/uni/infra/spprof-swspineprftest/rsspAccPortP-[uni/infra/spaccportprof-spineintprftest].json" in binding_query1.url'

  - name: Query interface selector profile associations without specifying a switch policy spine profile
    cisco.aci.aci_access_spine_interface_selector_to_spine_switch_profile:
      <<: *aci_info
      interface_selector: spineintprftest
      state: query
    register: binding_query2

  - name: query 2 assertions
    assert:
      that:
        - binding_query2 is not changed
        - binding_query2.current | length >= 1
        - binding_query2.filter_string == '?query-target-filter=eq(infraRsSpAccPortP.tDn,"uni/infra/spaccportprof-spineintprftest")'

  - name: Remove binding of interface access port selector and Interface Policy Leaf Profile - check mode
    cisco.aci.aci_access_spine_interface_selector_to_spine_switch_profile: &aci_access_spine_interface_selector_to_spine_switch_profile_absent
      <<: *aci_access_spine_switch_profile_present
      interface_selector: spineintprftest
      state: absent
    check_mode: yes
    register: intftospine_check_mode_absent

  - name: Remove binding of interface access port selector and Interface Policy Leaf Profile - delete works
    cisco.aci.aci_access_spine_interface_selector_to_spine_switch_profile:
      <<: *aci_access_spine_interface_selector_to_spine_switch_profile_absent
    register: intftospine_absent

  - name: Remove binding of interface access port selector and Interface Policy Leaf Profile - idempotency works
    cisco.aci.aci_access_spine_interface_selector_to_spine_switch_profile:
      <<: *aci_access_spine_interface_selector_to_spine_switch_profile_absent
    register: intftospine_absent_idempotent

  - name: Remove binding of interface access port selector and Interface Policy Leaf Profile - check mode
    cisco.aci.aci_access_spine_interface_selector_to_spine_switch_profile:
      <<: *aci_access_spine_switch_profile_present
      state: absent
    ignore_errors: true
    register: intftospine_absent_missing_param

  - name: absent assertions
    assert:
      that:
        - intftospine_check_mode_absent is changed
        - intftospine_check_mode_absent.previous != []
        - intftospine_absent is changed
        - intftospine_absent.previous == intftospine_check_mode_absent.previous
        - intftospine_absent_idempotent is not changed
        - intftospine_absent_idempotent.previous == []
        - intftospine_absent_missing_param is failed
        - 'intftospine_absent_missing_param.msg == "state is absent but all of the following are missing: interface_selector"'

  - name: Remove an interface selector associated with a Switch Policy Leaf Profile - Clean up
    cisco.aci.aci_access_spine_interface_selector_to_spine_switch_profile:
      <<: *aci_access_spine_interface_selector_to_spine_switch_profile_absent
      state: absent

  - name: delete Switch Policy Leaf profile - Clean up
    cisco.aci.aci_access_spine_switch_profile:
      <<: *aci_access_spine_switch_profile_present
      state: absent

  - name: delete Interface Policy Leaf profile - Clean up
    cisco.aci.aci_access_spine_interface_profile:
      <<: *aci_access_spine_interface_profile_present
      spine_interface_profile: spineintprftest
      state: absent
