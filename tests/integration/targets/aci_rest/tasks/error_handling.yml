# Test code for the ACI modules
# Copyright: (c) 2018, Dag Wieers (@dagwieers) <dag@wieers.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)


# PROVOKE ERRORS
- name: Error on name resolution
  cisco.aci.aci_rest:
    host: foo.bar.cisco.com
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: debug
    path: /api/mo/uni.json
    method: post
    content:
      fvTenant:
        attributes:
          name: ansible_test
  ignore_errors: true
  register: error_on_name_resolution

- name: Verify error_on_name_resolution
  assert:
    that:
    - error_on_name_resolution is failed
    - error_on_name_resolution.msg.startswith("Connection failed for https://foo.bar.cisco.com/api/aaaLogin.json.")
    - "'current' not in error_on_name_resolution"
    - "'previous' not in error_on_name_resolution"
    - "'sent' not in error_on_name_resolution"
    - "'proposed' not in error_on_name_resolution"
    - "'filter_string' not in error_on_name_resolution"

- name: Error when required parameter is missing
  cisco.aci.aci_rest:
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: debug
    method: post
    content:
      fvTenant:
        attributes:
          name: ansible_test
  ignore_errors: true
  register: error_on_missing_required_param

- name: Verify error_on_missing_required_param
  assert:
    that:
    - error_on_missing_required_param is failed
    - 'error_on_missing_required_param.msg == "missing required arguments: path"'
    - "'current' not in error_on_missing_required_param"
    - "'previous' not in error_on_missing_required_param"
    - "'sent' not in error_on_missing_required_param"
    - "'proposed' not in error_on_missing_required_param"
    - "'filter_string' not in error_on_missing_required_param"

- name: Error when attributes are missing
  cisco.aci.aci_rest:
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: debug
    path: /api/mo/uni/tn-ansible_test.json
    method: post
    content:
      fvTenant:
        children:
  ignore_errors: true
  register: error_on_missing_attributes

- name: Verify error_on_missing_attributes
  assert:
    that:
    - error_on_missing_attributes is failed
    - error_on_missing_attributes.method == 'POST'
    - "error_on_missing_attributes.msg == 'APIC Error 400: invalid data at line \\'1\\'. Attributes are missing, tag \\'attributes\\' must be specified first, before any other tag'"
    - 'error_on_missing_attributes.response == "HTTP Error 400: Bad Request"'
    - error_on_missing_attributes.status == 400
    - "'current' not in error_on_missing_attributes"
    - "'previous' not in error_on_missing_attributes"
    - "'sent' not in error_on_missing_attributes"
    - "'proposed' not in error_on_missing_attributes"
    - "'filter_string' not in error_on_missing_attributes"

- name: Error when input does not validate
  cisco.aci.aci_rest:
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: debug
    path: /api/mo/uni.json
    method: post
    content:
      fvTenant:
        attributes:
          name: ansible_test
          descr: This is an [invalid] description
  ignore_errors: true
  register: error_on_input_validation

- name: Verify error_on_input_validation
  assert:
    that:
    - error_on_input_validation is failed
    - error_on_input_validation.method == 'POST'
    - "error_on_input_validation.msg == 'APIC Error 801: property descr of tn-ansible_test failed validation for value \\'This is an [invalid] description\\''"
    - 'error_on_input_validation.response == "HTTP Error 400: Bad Request"'
    - error_on_input_validation.status == 400
    - "'current' not in error_on_input_validation"
    - "'previous' not in error_on_input_validation"
    - "'sent' not in error_on_input_validation"
    - "'proposed' not in error_on_input_validation"
    - "'filter_string' not in error_on_input_validation"

- name: Error when invalid attributes are used
  cisco.aci.aci_rest:
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: debug
    path: /api/mo/uni.json
    method: post
    content:
      fvTenant:
        attributes:
          name: ansible_test
          description: This is an "invalid" description
  ignore_errors: true
  register: error_on_invalid_attributes

- name: Verify error_on_invalid_attributes
  assert:
    that:
    - error_on_invalid_attributes is failed
    - error_on_invalid_attributes.method == 'POST'
    - "error_on_invalid_attributes.msg == 'APIC Error 400: unknown attribute \\'description\\' in element \\'fvTenant\\''"
    - 'error_on_invalid_attributes.response == "HTTP Error 400: Bad Request"'
    - error_on_invalid_attributes.status == 400
    - "'current' not in error_on_invalid_attributes"
    - "'previous' not in error_on_invalid_attributes"
    - "'sent' not in error_on_invalid_attributes"
    - "'proposed' not in error_on_invalid_attributes"
    - "'filter_string' not in error_on_invalid_attributes"

- name: Error on invalid object
  cisco.aci.aci_rest:
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: debug
    path: /api/mo/uni.json
    method: post
    content:
      fvFoobar:
        attributes:
          name: ansible_test
  ignore_errors: true
  register: error_on_invalid_object

- name: Verify error_on_invalid_object
  assert:
    that:
    - error_on_invalid_object is failed
    - error_on_invalid_object.method == 'POST'
    - "error_on_invalid_object.msg == 'APIC Error 122: unknown managed object class fvFoobar'"
    - 'error_on_invalid_object.response == "HTTP Error 400: Bad Request"'
    - error_on_invalid_object.status == 400
    - "'current' not in error_on_invalid_object"
    - "'previous' not in error_on_invalid_object"
    - "'sent' not in error_on_invalid_object"
    - "'proposed' not in error_on_invalid_object"

# Test case for certificate based error issue: https://github.com/CiscoDevNet/ansible-aci/issues/339
# Original error was with ospfCtxPol but same behaviour detected for tenant creation thus simplifying the test case
# Avoiding error: TypeError: must be str, not bytes
- name: Add user certificate
  cisco.aci.aci_aaa_user_certificate:
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    aaa_user: '{{ aci_username }}'
    name: admin
    certificate: "{{ lookup('file', 'pki/admin.crt') }}"
    state: present
  register: cm_add_cert

- name: Create tenant
  cisco.aci.aci_rest: &tenant
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    certificate_name: admin
    private_key: "{{ lookup('file', 'pki/admin.key') }}"
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /api/mo/uni.xml
    method: post
    content:
      <fvTenant name="test_tenant_cert_auth"/>

- name: Delete tenant
  cisco.aci.aci_rest:
    <<: *tenant
    content:
      <fvTenant name="test_tenant_cert_auth" status="deleted"/>

# Test cases for import error handling

- name: Uninstall lxml for error checking
  ansible.builtin.pip: &lxml
    name: lxml
    state: absent
  ignore_errors: true # ignore errors to because of multiple executions for hosts at the same time

- name: Uninstall xmljson for error checking
  ansible.builtin.pip: &xmljson
    name: xmljson
    state: absent
  ignore_errors: true # ignore errors to because of multiple executions for hosts at the same time

- name: Uninstall pyyaml for error checking
  ansible.builtin.pip: &pyyaml
    name: pyyaml
    state: absent
  ignore_errors: true # ignore errors to because of multiple executions for hosts at the same time

- name: Create tenant with invalid src attribute
  cisco.aci.aci_rest:
    <<: *tenant
  ignore_errors: true
  register: err_missing_lxml

- name: Install lxml
  ansible.builtin.pip:
    <<: *lxml
    state: present
  ignore_errors: true # ignore errors to because of multiple executions for hosts at the same time

- name: Create tenant with invalid src attribute
  cisco.aci.aci_rest:
    <<: *tenant
  ignore_errors: true
  register: err_missing_xmljson

- name: Install xmljson
  ansible.builtin.pip:
    <<: *xmljson
    state: present
  ignore_errors: true # ignore errors to because of multiple executions for hosts at the same time

- name: Install pyyaml
  ansible.builtin.pip:
    <<: *pyyaml
    state: present
  ignore_errors: true # ignore errors to because of multiple executions for hosts at the same time

# Test case for invalid src

- name: Create tenant with invalid src attribute
  cisco.aci.aci_rest:
    <<: *tenant
    src: "./targets/aci_rest/invalid_src.txt"
    content: "{{ fakevar | default(omit) }}"
  ignore_errors: true
  register: err_src_attribute

# Test case for invalid path extension

- name: Create tenant with invalid path extension
  cisco.aci.aci_rest:
    <<: *tenant
    path: /api/mo/uni.invalid
  ignore_errors: true
  register: err_extension

# Parse failures

- name: Create tenant with fail to parse xml
  cisco.aci.aci_rest:
    <<: *tenant
    src: "./targets/aci_rest/tasks/xml_files/fail_parse.xml"
    content: "{{ fakevar | default(omit) }}"
  ignore_errors: true
  register: err_fail_parse_xml

- name: Create tenant with fail to parse json
  cisco.aci.aci_rest:
    <<: *tenant
    path: /api/mo/uni.json
    src: "./targets/aci_rest/tasks/xml_files/fail_parse.json"
    content: "{{ fakevar | default(omit) }}"
  ignore_errors: true
  register: err_fail_parse_json

- name: Assertions checks for import error handling, invalid src, invalid path extension and parse failures
  assert:
    that:
      - err_missing_lxml.msg == "The lxml python library is missing, or lacks etree support."
      - err_missing_xmljson.msg == "The xmljson python library is missing, or lacks cobra support."
      - err_src_attribute.msg == "Cannot find/access src './targets/aci_rest/invalid_src.txt'"
      - err_extension.msg == "Failed to find REST API payload type (neither .xml nor .json)."
      - err_fail_parse_xml.msg.startswith("Failed to parse provided XML payload")
      - err_fail_parse_json.msg.startswith("Failed to parse provided JSON/YAML payload")
