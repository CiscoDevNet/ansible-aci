# Test code for the ACI modules
# Copyright: (c) 2017, Dag Wieers (@dagwieers) <dag@wieers.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)


# CLEAN ENVIRONMENT
- name: Remove tenant
  cisco.aci.aci_rest: &tenant_absent
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /api/mo/uni/tn-[ansible_test].json
    method: delete

- name: Remove tenant 2
  cisco.aci.aci_rest: 
    <<: *tenant_absent
    path: /api/mo/uni/tn-[ansible_test_2].json

# ADD TENANT
- name: Add tenant (check mode)
  cisco.aci.aci_rest: &tenant_present
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /api/mo/uni.json
    method: post
    content:
      {
          "fvTenant": {
              "attributes": {
                  "name": "ansible_test"
              }
          }
      }
  register: cm_add_tenant
  check_mode: true

- name: Verify checkmode did not create tenant
  cisco.aci.aci_tenant: 
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    name: ansible_test
    state: query
  register: cm_verify_checkmode_tenant

- name: Verify checkmode POST operation
  ansible.builtin.assert:
    that:
    - cm_add_tenant is changed
    - cm_add_tenant.proposed.fvTenant.attributes.name == "ansible_test"
    - cm_add_tenant.proposed.fvTenant.attributes.annotation == "orchestrator:ansible"
    - cm_verify_checkmode_tenant.current == []

- name: Add tenant (normal mode)
  cisco.aci.aci_rest: *tenant_present
  register: nm_add_tenant

- name: Add tenant again (normal mode)
  cisco.aci.aci_rest: *tenant_present
  register: nm_add_tenant_again

- name: Verify add_tenant
  ansible.builtin.assert:
    that:
    - nm_add_tenant is changed
    - nm_add_tenant.imdata.0.fvTenant.attributes.annotation == "orchestrator:ansible"
    - nm_add_tenant_again is not changed

# CHANGE TENANT
- name: Change description of tenant (normal mode)
  cisco.aci.aci_rest: &tenant_changed
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /api/mo/uni.json
    method: post
    content:
      {
          "fvTenant": {
              "attributes": {
                  "descr": "Ansible test tenant",
                  "name": "ansible_test"
              }
          }
      }
  register: nm_add_tenant_descr

- name: Change description of tenant again (normal mode)
  cisco.aci.aci_rest: *tenant_changed
  register: nm_add_tenant_descr_again

- name: Verify add_tenant_descr
  ansible.builtin.assert:
    that:
    - nm_add_tenant_descr is changed
    - nm_add_tenant_descr_again is not changed

# ADD TENANT AGAIN
- name: Add tenant again with no description (normal mode)
  cisco.aci.aci_rest: *tenant_present
  register: nm_add_tenant_again_no_descr

- name: Verify add_tenant_again_no_descr
  ansible.builtin.assert:
    that:
    - nm_add_tenant_again_no_descr is not changed

# QUERY ALL TENANTS
- name: Query all tenants (normal mode)
  cisco.aci.aci_rest: &tenant_query_all
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /api/mo/uni/tn-[ansible_test].json
    method: get
  register: nm_query_all_tenants

- name: Verify query_all_tenants
  ansible.builtin.assert:
    that:
    - nm_query_all_tenants is not changed

# ADD TENANT 2
- name: Add tenant 2 (normal mode)
  cisco.aci.aci_rest:
    <<: *tenant_present
    content:
      {
          "fvTenant": {
              "attributes": {
                  "descr": "Ansible test tenant",
                  "name": "ansible_test_2"
              }
          }
      }

# QUERY ALL TENANTS WITH PAGINATION
- name: Query all tenants with pagination (normal mode)
  cisco.aci.aci_rest: &tenant_query_all_paginated
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /api/class/uni/fvTenant.json
    page_size: 10
    method: get
  register: nm_query_all_tenants_paginated

- name: Query all tenant with pagination - Size 1 / Page 0 (normal mode)
  cisco.aci.aci_rest:
    <<: *tenant_query_all_paginated
    page_size: 1
  register: nm_query_all_tenants_paginated_1_0

- name: Query all tenant with pagination - Size 1 / Page 1 (normal mode)
  cisco.aci.aci_rest:
    <<: *tenant_query_all_paginated
    page_size: 1
    page: 1
  register: nm_query_all_tenants_paginated_1_1

- name: Query all tenant with pagination - Size 2 / Page 0 (normal mode)
  cisco.aci.aci_rest:
    <<: *tenant_query_all_paginated
    page_size: 2
  register: nm_query_all_tenants_paginated_2_0

- name: Verify query_all_tenants_paginated
  ansible.builtin.assert:
    that:
    - nm_query_all_tenants_paginated is not changed
    - nm_query_all_tenants_paginated_1_0 is not changed
    - nm_query_all_tenants_paginated_1_1 is not changed
    - nm_query_all_tenants_paginated_2_0 is not changed

- name: Verify pagination works as expected
  ansible.builtin.assert:
    that:
    - nm_query_all_tenants_paginated is not changed
    - nm_query_all_tenants_paginated_1_0.imdata | length == 1
    - nm_query_all_tenants_paginated_1_1.imdata | length == 1
    - nm_query_all_tenants_paginated_2_0.imdata | length == 2
    - nm_query_all_tenants_paginated_1_0.imdata.0.fvTenant.attributes.name == nm_query_all_tenants_paginated_2_0.imdata.0.fvTenant.attributes.name
    - nm_query_all_tenants_paginated_1_1.imdata.0.fvTenant.attributes.name == nm_query_all_tenants_paginated_2_0.imdata.1.fvTenant.attributes.name

# QUERY A TENANT
- name: Query our tenant
  cisco.aci.aci_rest: &tenant_query
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /api/mo/uni/tn-[ansible_test].json
    method: get
  register: nm_query_tenant

- name: Verify query_tenant
  ansible.builtin.assert:
    that:
    - nm_query_tenant is not changed

# REMOVE TENANT
- name: Remove tenant (normal mode)
  cisco.aci.aci_rest: *tenant_absent
  register: nm_remove_tenant

- name: Remove tenant_2 (normal mode)
  cisco.aci.aci_rest:
    <<: *tenant_absent
    path: /api/mo/uni/tn-[ansible_test_2].json
  register: nm_remove_tenant_2

- name: Remove tenant again (normal mode)
  cisco.aci.aci_rest: *tenant_absent
  register: nm_remove_tenant_again

- name: Verify remove_tenant
  ansible.builtin.assert:
    that:
    - nm_remove_tenant is changed
    - nm_remove_tenant_again is not changed

# QUERY NON-EXISTING TENANT
- name: Query non-existing tenant (normal mode)
  cisco.aci.aci_rest: *tenant_query
  register: nm_query_non_tenant

- name: Verify query_non_tenant
  ansible.builtin.assert:
    that:
    - nm_query_non_tenant is not changed

# VERIFY ANNOTATION SUPPORT
- name: Add tenant with annotation option
  cisco.aci.aci_rest:
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /api/mo/uni.json
    method: post
    annotation: test:inoption
    content:
      {
          "fvTenant": {
              "attributes": {
                  "descr": "Ansible test tenant",
                  "name": "ansible_test"
              }
          }
      }
  register: nm_add_tenant_annotation_option

- name: Add tenant with annotation in content
  cisco.aci.aci_rest:
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /api/mo/uni.json
    method: post
    content:
      {
          "fvTenant": {
              "attributes": {
                  "descr": "Ansible test tenant",
                  "name": "ansible_test",
                  "annotation": "test:incontent"
              }
          }
      }
  register: nm_add_tenant_annotation_content

- name: Add tenant with annotation in content and option
  cisco.aci.aci_rest:
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /api/mo/uni.json
    method: post
    annotation: test:inoption
    content:
      {
          "fvTenant": {
              "attributes": {
                  "descr": "Ansible test tenant",
                  "name": "ansible_test",
                  "annotation": "test:optionincontent"
              }
          }
      }
  register: nm_add_tenant_annotation_option_content

- name: Add tag to tenant with annotation unsupported
  cisco.aci.aci_rest:
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /api/mo/uni/tn-ansible_test/tagKey-foo.json
    method: post
    annotation: test:inoption
    content:
      {
          "tagTag": {
              "attributes": {
                  "value": "bar"
              }
          }
      }
  register: nm_add_tag_no_annotation

- name: Remove tenant
  cisco.aci.aci_rest: *tenant_absent

- name: Add tenant with children objects including annotation
  cisco.aci.aci_rest:
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /api/mo/uni.json
    method: post
    annotation: test:inoption
    content:
      {
          "fvTenant": {
              "attributes": {
                  "descr": "Ansible test tenant",
                  "name": "ansible_test"
              },
              "children": [
                {
                  "fvCtx": {
                    "attributes": {
                      "name": "VRF1"
                    }
                  }
                },
                {
                  "fvAp": {
                    "attributes": {
                      "name": "Application1"
                    },
                    "children": [
                      {
                        "fvAEPg": {
                          "attributes": {
                            "name": "WebTier",
                            "annotation": "test:inchild"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
          }
      }
  register: nm_add_tenant_annotation_children

- name: Verify annotation support
  assert:
    that:
    - nm_add_tenant_annotation_option.imdata.0.fvTenant.attributes.annotation == "test:inoption"
    - nm_add_tenant_annotation_content.imdata.0.fvTenant.attributes.annotation == "test:incontent"
    - nm_add_tenant_annotation_option_content.imdata.0.fvTenant.attributes.annotation == "test:optionincontent"
    - nm_add_tag_no_annotation.imdata.0.tagTag.attributes.annotation is undefined
    - nm_add_tenant_annotation_children.imdata.0.fvTenant.attributes.annotation == "test:inoption"
    - nm_add_tenant_annotation_children.imdata.0.fvTenant.children.0.fvAp.attributes.annotation == "test:inoption"
    - nm_add_tenant_annotation_children.imdata.0.fvTenant.children.0.fvAp.children.0.fvAEPg.attributes.annotation == "test:inchild"
    - nm_add_tenant_annotation_children.imdata.0.fvTenant.children.2.fvCtx.attributes.annotation == "test:inoption"

# Test to check the fix for disabling intersight connectivity issue: https://github.com/CiscoDevNet/ansible-aci/issues/685
- name: Disable Intersight Connectivity
  cisco.aci.aci_rest:
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    path: /connector/Systems.json
    method: post
    rsp_subtree_preserve: true
    content:
      {
        "AdminState": false
      }
  register: disable_intersight_connectivity

- name: Verify Intersight Connectivity is disabled
  assert:
    that:
    - disable_intersight_connectivity.imdata.0.AdminState == false
