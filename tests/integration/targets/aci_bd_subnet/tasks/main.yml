# Test code for the ACI modules
# Copyright: (c) 2017, Jacob McGill (@jmcgill298)

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: Set vars
  set_fact:
    aci_info: &aci_info
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: debug

- name: Query system information
  cisco.aci.aci_system:
    <<: *aci_info
    id: 1
    state: query
  register: version

- name: Verify Cloud and Non-Cloud Sites in use.
  include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Execute tasks only for non-cloud sites
  when: query_cloud.current == []  # This condition will execute only non-cloud sites
  block:  # block specifies execution of tasks within, based on conditions
  - name: ensure tenant exists for tests to kick off
    cisco.aci.aci_tenant: &aci_tenant_present
      <<: *aci_info
      tenant: ansible_test
    register: tenant_present

  - name: Query system information
    cisco.aci.aci_system:
      <<: *aci_info
      id: 1
      state: query
    register: version

  - name: ensure bd exists for tests to kick off
    cisco.aci.aci_bd: &aci_bd_present
      <<: *aci_tenant_present
      bd: anstest
    register: bd_present

  - name: ensure subnet does not exist for tests to kick off
    cisco.aci.aci_bd_subnet: &aci_subnet_absent
      <<: *aci_bd_present
      state: absent
      gateway: 10.100.100.1
      mask: 24

  - name: ensure subnet does not exist for tests to kick off
    cisco.aci.aci_bd_subnet: &aci_subnet2_absent
      <<: *aci_subnet_absent
      gateway: 10.100.101.1
      mask: 25

  - name: create subnet - check mode works
    cisco.aci.aci_bd_subnet: &aci_subnet_present
      <<: *aci_subnet_absent
      state: present
      subnet_name: anstest
      descr: Ansible Test
    check_mode: true
    register: create_check_mode

  - name: create subnet - creation works
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet_present
    register: create_subnet

  - name: create new subnet - creation works (with no ip_data_plane_learning - APIC version < 5.0)
    cisco.aci.aci_bd_subnet: &aci_subnet2_present
      <<: *aci_subnet2_absent
      state: present
      descr: Ansible Test
      scope: [private, shared]
      route_profile: default
      route_profile_l3_out: default
    register: create_subnet2
    when: version.current.0.topSystem.attributes.version is version('5', '<')

  - name: create new subnet - creation works (with ip_data_plane_learning - APIC version >= 5.0)
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet2_present
      state: present
      descr: Ansible Test
      scope: [private, shared]
      route_profile: default
      route_profile_l3_out: default
      ip_data_plane_learning: disabled
    register: create_subnet2_5
    when: version.current.0.topSystem.attributes.version is version('5', '>=')

  - name: create subnet again - idempotency works
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet2_present
    register: create_idempotency

  - name: modify subnet - update works
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet_present
      scope: [shared, public]
      subnet_control: querier_ip
    register: modify_subnet

  - name: create subnet with bad scope - failure message works
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet_present
      scope: [private, public]
    register: create_bad_scope
    ignore_errors: true

  - name: create subnet without all necessary params - failure message works
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet_present
      bd: "{{ fake_var | default(omit) }}"
    register: create_incomplete_data
    ignore_errors: true

  - name: assert for subnet creation tasks
    assert:
      that:
        - create_check_mode is changed
        - create_check_mode.sent.fvSubnet.attributes.descr == create_subnet.sent.fvSubnet.attributes.descr == 'Ansible Test'
        - create_check_mode.sent.fvSubnet.attributes.ip == create_subnet.sent.fvSubnet.attributes.ip == '10.100.100.1/24'
        - create_check_mode.sent.fvSubnet.attributes.name == create_subnet.sent.fvSubnet.attributes.name == 'anstest'
        - create_subnet is changed
        - create_subnet.current.0.fvSubnet.attributes.annotation == 'orchestrator:ansible'
        - create_subnet.previous == []
        - create_idempotency is not changed
        - create_idempotency.previous != []
        - modify_subnet is changed
        - modify_subnet.previous != []
        - modify_subnet.sent != modify_subnet.proposed
        - modify_subnet.sent.fvSubnet.attributes.ctrl == 'querier'
        - modify_subnet.sent.fvSubnet.attributes.scope == 'public,shared'
        - create_bad_scope is failed
        - create_bad_scope.msg.startswith("Parameter 'scope' cannot be both 'private' and 'public'")
        - create_incomplete_data is failed
        - 'create_incomplete_data.msg == "state is present but all of the following are missing: bd"'

  - name: assert for subnet for task with version < 5
    assert:
      that:
        - create_subnet2 is changed
        - create_subnet2.sent == create_subnet2.proposed
        - create_subnet2.sent.fvSubnet.attributes.scope == "private,shared"
        - create_subnet2.sent.fvSubnet.children.0.fvRsBDSubnetToProfile.attributes.tnL3extOutName == 'default'
        - create_subnet2.sent.fvSubnet.children.0.fvRsBDSubnetToProfile.attributes.tnRtctrlProfileName == 'default'
    when: version.current.0.topSystem.attributes.version is version('5', '<')

  - name: assert for subnet ip_data_learning for task with version >=5
    assert:
      that:
        - create_subnet.current.0.fvSubnet.attributes.ipDPLearning == 'enabled'
        - create_subnet2_5 is changed
        - create_subnet2_5.current.0.fvSubnet.attributes.ipDPLearning == 'disabled'
        - create_subnet2_5.sent == create_subnet2_5.proposed
        - create_subnet2_5.sent.fvSubnet.attributes.scope == "private,shared"
        - create_subnet2_5.sent.fvSubnet.children.0.fvRsBDSubnetToProfile.attributes.tnL3extOutName == 'default'
        - create_subnet2_5.sent.fvSubnet.children.0.fvRsBDSubnetToProfile.attributes.tnRtctrlProfileName == 'default'
    when: version.current.0.topSystem.attributes.version is version('5', '>=')

  - name: get all subnets
    cisco.aci.aci_bd_subnet: &aci_query
      <<: *aci_tenant_present
      state: query
      tenant: "{{ fake_var | default(omit) }}"
    register: get_all

  - name: get all in tenant
    cisco.aci.aci_bd_subnet:
      <<: *aci_query
      tenant: ansible_test
    register: get_all_tenant

  - name: get all in bd
    cisco.aci.aci_bd_subnet:
      <<: *aci_query
      bd: anstest
    register: get_all_bd

  - name: get all tenant and bd
    cisco.aci.aci_bd_subnet:
      <<: *aci_bd_present
      state: query
    register: get_all_tenant_bd

  - name: get subnet in tenant
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet_present
      state: query
      bd: "{{ fake_var | default(omit) }}"
    register: get_subnet_tenant

  - name: get subnet in bd
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet_present
      state: query
      tenant: "{{ fake_var | default(omit) }}"
    register: get_subnet_bd

  - name: get specific subnet
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet_present
      state: query
    register: get_subnet

  - name: get all subnets matching gateway
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet_present
      state: query
      tenant: "{{ fake_var | default(omit) }}"
      bd: "{{ fake_var | default(omit) }}"
    register: get_subnets_gateway

  - name: asserts for query tasks
    assert:
      that:
        - get_all is not changed
        - get_all.current | length > 1
        - get_all_tenant is not changed
        - '"tn-ansible_test.json" in get_all_tenant.url'
        - get_all_bd is not changed
        - '"query-target-filter=eq(fvBD.name,\"anstest\")" in get_all_bd.filter_string'
        - '"class/fvBD.json" in get_all_bd.url'
        - get_all_tenant_bd is not changed
        - '"tn-ansible_test/BD-anstest.json" in get_all_tenant_bd.url'
        - get_all_tenant_bd.current.0.fvBD.children | length > 1
        - get_subnet_tenant is not changed
        - '"rsp-subtree-filter=eq(fvSubnet.ip,\"10.100.100.1/24\")" in get_subnet_tenant.filter_string'
        - '"tn-ansible_test.json" in get_subnet_tenant.url'
        - get_subnet_bd is not changed
        - '"query-target-filter=eq(fvBD.name,\"anstest\")"'
        - '"rsp-subtree-filter=eq(fvSubnet.ip,\"10.100.100.1/24\")" in get_subnet_bd.filter_string'
        - '"class/fvBD.json" in get_subnet_bd.url'
        - get_subnet is not changed
        - get_subnet.current | length == 1
        - '"tn-ansible_test/BD-anstest/subnet-[10.100.100.1/24].json" in get_subnet.url'
        - get_subnets_gateway is not changed
        - '"query-target-filter=eq(fvSubnet.ip,\"10.100.100.1/24\")" in get_subnets_gateway.filter_string'
        - '"class/fvSubnet.json" in get_subnets_gateway.url'

  - name: error handling for ipv4 subnet with wrong mask
    cisco.aci.aci_bd_subnet:
      <<: *aci_bd_present
      gateway: 10.100.100.1
      mask: 33
    ignore_errors: true
    register: error_mask_ipv4
  
  - name: error handling for ipv6 subnet with wrong mask
    cisco.aci.aci_bd_subnet:
      <<: *aci_bd_present
      gateway: "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
      mask: 129
    ignore_errors: true
    register: error_mask_ipv6

  - name: asserts for mask error handling
    assert:
      that:
      - error_mask_ipv4.msg == "Valid Subnet Masks are 0 to 32 for IPv4 Addresses"
      - error_mask_ipv6.msg == "Valid Subnet Masks are 0 to 128 for IPv6 Addresses"

  - name: delete subnet - check mode works
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet_absent
    check_mode: true
    register: delete_check_mode

  - name: delete subnet - delete works
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet_absent
    register: delete_subnet

  - name: delete subnet - cleanup
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet2_absent

  - name: delete subnet again - idempotency works
    cisco.aci.aci_bd_subnet:
      <<: *aci_subnet2_absent
    register: delete_idempotency

  - name: asserts for deletion task
    assert:
      that:
        - delete_check_mode is changed
        - delete_check_mode.proposed == {}
        - delete_subnet is changed
        - delete_subnet.previous != []
        - delete_subnet.method == "DELETE"
        - delete_idempotency is not changed
        - delete_idempotency.previous == []

  - name: delete bd - cleanup before ending tests
    cisco.aci.aci_bd:
      <<: *aci_bd_present
      state: absent
    when: bd_present is changed

  - name: delete tenant - cleanup before ending tests
    cisco.aci.aci_tenant:
      <<: *aci_tenant_present
      state: absent
    when: tenant_present is changed
