# Test code for the ACI modules
# Copyright: (c) 2017, Bruno Calogero <brunocalogero@hotmail.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: Verify Cloud and Non-Cloud Sites in use.
  include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Execute tasks only for non-cloud sites
  when: query_cloud.current == []  # This condition will execute only non-cloud sites
  block:  # block specifies execution of tasks within, based on conditions
  - name: Deleting Switch Policy Spine profile exists for kick off
    cisco.aci.aci_switch_policy_spine_profile:
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: '{{ aci_output_level | default("info") }}'
      spine_profile: sw_name_test
      state: absent

  - name: Ensuring Switch Policy Spine profile exists for kick off
    cisco.aci.aci_switch_policy_spine_profile: &aci_switch_policy_spine_profile_present
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: debug
      spine_profile: sw_name_test
      state: present
    register: spine_profile_present

  # TODO: Ensure that spine Policy Group Exists (module missing) (infra:AccPortGrp)

  - name: Adding a switch policy spine profile selector associated Node Block range (w/o policy group) - check mode works
    cisco.aci.aci_switch_spine_selector: &aci_switch_spine_selector_present
      <<: *aci_switch_policy_spine_profile_present
      spine: spine_selector_name
      spine_node_blk: node_blk_name
      from: 1011
      to: 1011
    check_mode: yes
    register: sw_spine_selec_check_mode_present

  - name: Adding a switch policy spine profile selector associated Node Block range (w/o policy group) - creation works
    cisco.aci.aci_switch_spine_selector:
      <<: *aci_switch_spine_selector_present
    register: sw_spine_selec_present

  - name: Adding a switch policy spine profile selector associated Node Block range (w/o policy group) - idempotency works
    cisco.aci.aci_switch_spine_selector:
      <<: *aci_switch_spine_selector_present
    register: sw_spine_selec_idempotent

  - name: Adding a switch policy spine profile selector associated Node Block range (w/ policy group) - update works
    cisco.aci.aci_switch_spine_selector:
      <<: *aci_switch_spine_selector_present
      policy_group: anstest_policygroupname
    register: sw_spine_selec_update

  # TODO: also test for errors
  - name: present assertions
    assert:
      that:
      - sw_spine_selec_check_mode_present is changed
      - sw_spine_selec_present is changed
      - sw_spine_selec_present.previous == []
      - sw_spine_selec_present.sent.infraSpineS.attributes.name == 'spine_selector_name'
      - sw_spine_selec_present.sent.infraSpineS.children.0.infraNodeBlk.attributes.from_ == '1011'
      - sw_spine_selec_present.sent.infraSpineS.children.0.infraNodeBlk.attributes.to_ == '1011'
      - sw_spine_selec_present.sent.infraSpineS.children.0.infraNodeBlk.attributes.name == 'node_blk_name'
      - sw_spine_selec_present.current.0.infraSpineS.attributes.annotation == 'orchestrator:ansible'
      - sw_spine_selec_idempotent is not changed
      - sw_spine_selec_idempotent.sent == {}
      - sw_spine_selec_update is changed
      - sw_spine_selec_update.sent.infraSpineS.attributes == {}
      - sw_spine_selec_update.sent.infraSpineS.children.0.infraRsSpineAccNodePGrp.attributes.tDn == 'uni/infra/funcprof/spaccnodepgrp-anstest_policygroupname'

  - name: Query Specific switch policy spine profile selector
    cisco.aci.aci_switch_spine_selector:
      <<: *aci_switch_policy_spine_profile_present
      spine: spine_selector_name # "{{ fake_var | default(omit) }}" ?
      state: query
    register: binding_query

  - name: present assertions
    assert:
      that:
        - binding_query is not changed
        - binding_query.current | length >= 1
        - '"api/mo/uni/infra/spprof-sw_name_test/spines-spine_selector_name-typ-range.json" in binding_query.url'

  - name: Remove binding of interface access port selector and Interface Policy Spine Profile - check mode
    cisco.aci.aci_switch_spine_selector: &aci_switch_spine_selector_absent
      <<: *aci_switch_policy_spine_profile_present
      spine: spine_selector_name
      state: absent
    check_mode: yes
    register: sw_spine_selec_check_mode_absent

  - name: Remove switch policy spine profile selector - delete works
    cisco.aci.aci_switch_spine_selector:
      <<: *aci_switch_spine_selector_absent
    register: sw_spine_selec_absent

  - name: Remove switch policy spine profile selector - idempotency works
    cisco.aci.aci_switch_spine_selector:
      <<: *aci_switch_spine_selector_absent
    register: sw_spine_selec_absent_idempotent

  - name: Remove switch policy spine profile selector - check mode
    cisco.aci.aci_switch_spine_selector:
      <<: *aci_switch_policy_spine_profile_present
      #access_port_selector: anstest_accessportselector
      state: absent
    ignore_errors: yes
    register: sw_spine_selec_absent_missing_param

  - name: absent assertions
    assert:
      that:
        - sw_spine_selec_check_mode_absent is changed
        - sw_spine_selec_check_mode_absent.previous != []
        - sw_spine_selec_absent is changed
        - sw_spine_selec_absent.previous == sw_spine_selec_check_mode_absent.previous
        - sw_spine_selec_absent_idempotent is not changed
        - sw_spine_selec_absent_idempotent.previous == []
        - sw_spine_selec_absent_missing_param is failed
        - 'sw_spine_selec_absent_missing_param.msg == "state is absent but all of the following are missing: spine"'


  - name: Remove switch policy spine profile selector - Clean up
    cisco.aci.aci_switch_spine_selector:
      <<: *aci_switch_spine_selector_absent
      state: absent

  - name: Deleting Switch Policy Spine profile exists for kick off
    cisco.aci.aci_switch_policy_spine_profile:
      <<: *aci_switch_policy_spine_profile_present
      state: absent
