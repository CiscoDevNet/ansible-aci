# Test code for the ACI modules
# Copyright: (c) 2021, Tim Cragg (@timcragg)

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

# GET Credentials from the inventory
- name: Set vars
  set_fact:
    aci_info: &aci_info
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: '{{ aci_output_level | default("info") }}'

# CLEAN ENVIRONMENT
- name: Remove ansible_tenant if it already exists
  aci_tenant:
    <<: *aci_info
    name: ansible_tenant
    state: absent

- name: Remove ansible_phys_domain if it already exists
  aci_domain:
    <<: *aci_info
    domain: ansible_phys_dom
    domain_type: phys
    state: absent

# CREATE TENANT
- name: Create ansible_tenant
  aci_tenant:
    <<: *aci_info
    name: ansible_tenant
    state: present

# CREATE DOMAIN
- name: Create ansible_phys_domain
  aci_domain:
    <<: *aci_info
    domain: ansible_phys_dom
    domain_type: phys
    state: present

# CREATE L4-L7 LOGICAL DEVICE
- name: Create L4-L7 Device
  aci_l4l7_device:
    <<: *aci_info
    tenant: ansible_tenant
    device: ansible_device
    domain: ansible_phys_dom
    func_type: GoTo
    context_aware: single
    is_copy: false
    managed: false
    dev_type: physical
    svc_type: adc
    trunking: false
    prom_mode: true
    state: present

# CREATE CONTRACT
- name: Create contract
  aci_contract:
    <<: *aci_info
    tenant: ansible_tenant
    contract: ansible_contract
    scope: application-profile
    state: present

# CREATE L4-L7 SERVICE GRAPH
- name: Create L4-L7 Service Graph
  aci_l4l7_service_graph_template:
    <<: *aci_info
    tenant: ansible_tenant
    service_graph: ansible_graph
    state: present

# CREATE L4-L7 DEVICE SELECTION POLICY
- name: Create L4-L7 Device Selection Policy
  aci_l4l7_device_selection_policy:
    <<: *aci_info
    tenant: ansible_tenant
    contract: ansible_contract
    graph: ansible_graph
    node: ansible_node
    state: present

# BIND LOGICAL DEVICE TO POLICY
- name: Bind Logical Device to Policy
  aci_l4l7_device_selection_device:
    <<: *aci_info
    tenant: ansible_tenant
    contract: ansible_contract
    graph: ansible_graph
    node: ansible_node
    device: ansible_device
    state: present
  register: add_device_binding

- name: Verify Device Binding
  assert:
    that:
    - add_device_binding.current.0.vnsRsLDevCtxToLDev.attributes.dn == "uni/tn-ansible_tenant/ldevCtx-c-ansible_contract-g-ansible_graph-n-ansible_node/rsLDevCtxToLDev"
    - add_device_binding.current.0.vnsRsLDevCtxToLDev.attributes.tDn == "uni/tn-ansible_tenant/lDevVip-ansible_device"

# BIND LOGICAL DEVICE TO POLICY AGAIN TO CHECK IDEMPOTENCE
- name: Bind Logical Device to Policy again
  aci_l4l7_device_selection_device:
    <<: *aci_info
    tenant: ansible_tenant
    contract: ansible_contract
    graph: ansible_graph
    node: ansible_node
    device: ansible_device
    state: present
  register: add_device_binding_again

- name: Verify Device Binding is not changed
  assert:
    that:
    - add_device_binding_again is not changed
    - add_device_binding_again.current.0.vnsRsLDevCtxToLDev.attributes.dn == "uni/tn-ansible_tenant/ldevCtx-c-ansible_contract-g-ansible_graph-n-ansible_node/rsLDevCtxToLDev"
    - add_device_binding_again.current.0.vnsRsLDevCtxToLDev.attributes.tDn == "uni/tn-ansible_tenant/lDevVip-ansible_device"

# QUERY DEVICE BINDING
- name: Query Logical Device Binding to Policy
  aci_l4l7_device_selection_device:
    <<: *aci_info
    tenant: ansible_tenant
    contract: ansible_contract
    graph: ansible_graph
    node: ansible_node
    state: query
  register: query_device_binding

- name: Verify Device Binding is not changed
  assert:
    that:
    - query_device_binding is not changed
    - query_device_binding.current.0.vnsRsLDevCtxToLDev.attributes.dn == "uni/tn-ansible_tenant/ldevCtx-c-ansible_contract-g-ansible_graph-n-ansible_node/rsLDevCtxToLDev"
    - query_device_binding.current.0.vnsRsLDevCtxToLDev.attributes.tDn == "uni/tn-ansible_tenant/lDevVip-ansible_device"

# REMOVE DEVICE BINDING
- name: Remove Logical Device Binding from Policy
  aci_l4l7_device_selection_device:
    <<: *aci_info
    tenant: ansible_tenant
    contract: ansible_contract
    graph: ansible_graph
    node: ansible_node
    device: ansible_device
    state: absent
  register: delete_device_binding

- name: Verify Device Binding Deletion
  assert:
    that:
    - delete_device_binding is changed
    - delete_device_binding.current == []
    - delete_device_binding.previous.0.vnsRsLDevCtxToLDev.attributes.dn == "uni/tn-ansible_tenant/ldevCtx-c-ansible_contract-g-ansible_graph-n-ansible_node/rsLDevCtxToLDev"
    - delete_device_binding.previous.0.vnsRsLDevCtxToLDev.attributes.tDn == "uni/tn-ansible_tenant/lDevVip-ansible_device"

# REMOVE DEVICE BINDING AGAIN TO TEST IDEMPOTENCE
- name: Remove Logical Device Binding from Policy again
  aci_l4l7_device_selection_device:
    <<: *aci_info
    tenant: ansible_tenant
    contract: ansible_contract
    graph: ansible_graph
    node: ansible_node
    device: ansible_device
    state: absent
  register: delete_device_binding_again

- name: Verify Device Binding Deletion idempotence
  assert:
    that:
    - delete_device_binding_again is not changed
    - delete_device_binding_again.current == []

# CLEAN UP
- name: Remove ansible_tenant
  aci_tenant:
    <<: *aci_info
    name: ansible_tenant
    state: absent

- name: Remove ansible_phys_domain
  aci_domain:
    <<: *aci_info
    domain: ansible_phys_dom
    domain_type: phys
    state: absent
