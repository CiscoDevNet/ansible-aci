# Test code for the ACI modules
# Copyright: (c) 2022, Akini Ross (akinross@cisco.com)
#
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: Set vars
  set_fact:
    aci_info: &aci_info
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: '{{ aci_output_level | default("info") }}'

- name: Sinlge string, single range
  ansible.builtin.debug:
    msg: "{{ item }}"
  with_items: "{{ query('cisco.aci.interface_range', '5/0-2') }}"
  register: single_string_single_range

- name: Valid input assertions
  assert:
    that:
      - single_string_single_range.results.0.item == "5/0"
      - single_string_single_range.results.1.item == "5/1"
      - single_string_single_range.results.2.item == "5/2"

- name: Single string, multiple range
  ansible.builtin.debug:
    msg: "{{ item }}"
  with_items: "{{ query('cisco.aci.interface_range', '1/1-4,2/10-15') }}"
  register: single_string_multiple_interface

- name: Valid input assertions
  assert:
    that:
      - single_string_multiple_interface.results.0.item == "1/1"
      - single_string_multiple_interface.results.1.item == "1/2"
      - single_string_multiple_interface.results.2.item == "1/3"
      - single_string_multiple_interface.results.3.item == "1/4"
      - single_string_multiple_interface.results.4.item == "2/10"
      - single_string_multiple_interface.results.5.item == "2/11"
      - single_string_multiple_interface.results.6.item == "2/12"
      - single_string_multiple_interface.results.7.item == "2/13"
      - single_string_multiple_interface.results.8.item == "2/14"
      - single_string_multiple_interface.results.9.item == "2/15"

- name: Single string, single interface
  ansible.builtin.debug:
    msg: "{{ item }}"
  with_items: "{{ query('cisco.aci.interface_range', '1/1') }}"
  register: single_string_single_interface_as_range

- name: Valid input assertions
  assert:
    that:
      - single_string_single_interface_as_range.results.0.item == "1/1"

- name: Multiple string, single and multiple range
  ansible.builtin.debug:
    msg: "{{ item }}"
  with_items: "{{ query('cisco.aci.interface_range', '1/1-4,1/2/10-15', '2/3/4/5/2', '5/4-5') }}"
  register: single_string_mix_ranges

- name: Valid input assertions
  assert:
    that:
      - single_string_mix_ranges.results.0.item == "1/1"
      - single_string_mix_ranges.results.1.item == "1/2"
      - single_string_mix_ranges.results.2.item == "1/2/10"
      - single_string_mix_ranges.results.3.item == "1/2/11"
      - single_string_mix_ranges.results.4.item == "1/2/12"
      - single_string_mix_ranges.results.5.item == "1/2/13"
      - single_string_mix_ranges.results.6.item == "1/2/14"
      - single_string_mix_ranges.results.7.item == "1/2/15"
      - single_string_mix_ranges.results.8.item == "1/3"
      - single_string_mix_ranges.results.9.item == "1/4"
      - single_string_mix_ranges.results.10.item == "2/3/4/5/2"
      - single_string_mix_ranges.results.11.item == "5/4"
      - single_string_mix_ranges.results.12.item == "5/5"

- name: Invalid input not matching pattern
  ansible.builtin.debug:
    msg: "{{ item }}"
  with_items: "{{ query('cisco.aci.interface_range', 'not matching pattern') }}"
  ignore_errors: true
  register: invalid_pattern

- name: Invalid input end smaller than start
  ansible.builtin.debug:
    msg: "{{ item }}"
  with_items: "{{ query('cisco.aci.interface_range', '1/4-1') }}"
  ignore_errors: true
  register: invalid_range_order

- name: Invalid input assertions
  assert:
    that:
      - "'Invalid range inputs,' in invalid_pattern.msg"
      - "'Invalid range inputs,' in invalid_range_order.msg"

- name: Leaf - Disable interfaces
  cisco.aci.aci_interface_blacklist:
    <<: *aci_info
    pod_id: 1
    node_id: 1101
    interface: "{{ item }}"
    state: present
  with_items: "{{ query('cisco.aci.interface_range', '1/30-32') }}"
  register: disable_leaf_int

- name: Invalid input not matching pattern
  ansible.builtin.debug:
    msg: "{{ disable_leaf_int }}"

- name: Valid disable interface assertions
  assert:
    that:
      - disable_leaf_int.results.0.current.0.fabricRsOosPath.attributes.lc == "blacklist"
      - disable_leaf_int.results.0.current.0.fabricRsOosPath.attributes.tDn == "topology/pod-1/paths-1101/pathep-[eth1/30]"
      - disable_leaf_int.results.1.current.0.fabricRsOosPath.attributes.lc == "blacklist"
      - disable_leaf_int.results.1.current.0.fabricRsOosPath.attributes.tDn == "topology/pod-1/paths-1101/pathep-[eth1/31]"
      - disable_leaf_int.results.2.current.0.fabricRsOosPath.attributes.lc == "blacklist"
      - disable_leaf_int.results.2.current.0.fabricRsOosPath.attributes.tDn == "topology/pod-1/paths-1101/pathep-[eth1/32]"

- name: Leaf - Enable interfaces
  cisco.aci.aci_interface_blacklist:
    <<: *aci_info
    pod_id: 1
    node_id: 1101
    interface: "{{ item }}"
    state: absent
  with_items: "{{ query('cisco.aci.interface_range', '1/30-32') }}"
  register: enable_leaf_int

- name: Valid enable interface assertions
  assert:
    that:
      - enable_leaf_int.results.0.current == []
      - enable_leaf_int.results.1.current == []
      - enable_leaf_int.results.2.current == []
