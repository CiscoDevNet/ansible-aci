# Test code for the ACI modules
# Copyright: (c) 2017, Jacob McGill (@jmcgill298)

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

# CLEAN ENVIRONMENT
- name: Set vars
  set_fact:
    aci_info: &aci_info
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: '{{ aci_output_level | default("debug") }}'

- name: Verify Cloud and Non-Cloud Sites in use.
  include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

# TODO current module will fail on cloud sites because range is not supported
# APIC Error 1: Invalid Configuration CLOUD_SOURCE_PORT_NOT_SUPPORTED: vz::EntryMo Dn = uni/tn-ansible_test/flt-anstest_fileter_2/e-source_port_start - Source port range is not allowed on CAPIC"
- name: Execute tasks only for non-cloud sites
  when: query_cloud.current == []  # This condition will execute only non-cloud sites
  block:  # block specifies execution of tasks within, based on conditions

  - name: ensure tenant exists for tests to kick off
    cisco.aci.aci_tenant:
      <<: *aci_info
      tenant: ansible_test
      state: absent

  - name: ensure tenant exists for tests to kick off
    cisco.aci.aci_tenant: &aci_tenant_present
      <<: *aci_info
      tenant: ansible_test
      state: present
    register: tenant_present

  - name: ensure filter exists for tests to kick off
    cisco.aci.aci_filter: &aci_filter_present
      <<: *aci_tenant_present
      filter: anstest
    register: filter_present

  - name: ensure anstest_2 filter exists for tests to kick off
    cisco.aci.aci_filter: &anstest_fileter_2_present
      <<: *aci_tenant_present
      filter: anstest_fileter_2

  - name: Create a filter entry with the match_only_fragments - enabled and dst_port values - negative test
    cisco.aci.aci_filter_entry:
      <<: *anstest_fileter_2_present
      entry: nt_match_only_fragments_with_dst_port
      ether_type: ip
      ip_protocol: tcp
      dst_port_start: 80
      dst_port_end: 88
      match_only_fragments: true
    register: nt_match_only_fragments_with_dst_port
    ignore_errors: true

  - name: Create a filter entry with the match_only_fragments - enabled
    cisco.aci.aci_filter_entry: &match_only_fragments_enabled
      <<: *anstest_fileter_2_present
      entry: match_only_fragments_enabled
      ether_type: ip
      ip_protocol: tcp
      match_only_fragments: true
    register: match_only_fragments_enabled

  - name: Disabled the match_only_fragments of an existing filter entry - "match_only_fragments_enabled"
    cisco.aci.aci_filter_entry:
      <<: *match_only_fragments_enabled
      match_only_fragments: false
    register: match_only_fragments_disabled

  - name: Create a filter entry with the source_port values - negative test
    cisco.aci.aci_filter_entry:
      <<: *anstest_fileter_2_present
      entry: nt_source_port
      ether_type: ip
      ip_protocol: tcp
      source_port: 20
      source_port_start: 22
      source_port_end: 22
    register: nt_source_port
    ignore_errors: true

  - name: Create a filter entry with the only dst_port_end  - negative test
    cisco.aci.aci_filter_entry:
      <<: *anstest_fileter_2_present
      entry: nt_dst_port_end
      ether_type: ip
      ip_protocol: tcp
      dst_port_end: 20
    register: nt_dst_port_end
    ignore_errors: true

  - name: Create a filter entry with the only source_port_end  - negative test
    cisco.aci.aci_filter_entry:
      <<: *anstest_fileter_2_present
      entry: nt_source_port_end
      ether_type: ip
      ip_protocol: tcp
      source_port_end: 20
    register: nt_source_port_end
    ignore_errors: true

  - name: Create a filter entry with the only source_port_start
    cisco.aci.aci_filter_entry:
      <<: *anstest_fileter_2_present
      entry: source_port_start
      ether_type: ip
      ip_protocol: tcp
      source_port_start: 20
    register: source_port_start

  - name: Create a filter entry with only source_port_start, source_port_end and valid tcp_flags rules
    cisco.aci.aci_filter_entry:
      <<: *anstest_fileter_2_present
      entry: source_port_values
      ether_type: ip
      ip_protocol: tcp
      source_port_start: 20
      source_port_end: 23
      tcp_flags:
        - acknowledgment
        - finish
    register: source_port_values

  - name: Updated source port and tcp_flags values of an existing filter entry - "source_port_values"
    cisco.aci.aci_filter_entry:
      <<: *anstest_fileter_2_present
      entry: source_port_values
      ether_type: ip
      ip_protocol: tcp
      source_port: 53
      tcp_flags:
        - acknowledgment
    register: update_source_port_values

  - name: Create a filter entry with the tcp_flags - established and other tcp rules - negative test
    cisco.aci.aci_filter_entry:
      <<: *anstest_fileter_2_present
      entry: nt_tcp_flags
      ether_type: ip
      ip_protocol: tcp
      tcp_flags:
        - acknowledgment
        - established
        - finish
    register: nt_tcp_flags
    ignore_errors: true

  - name: Create a filter entry with the tcp_flags - established
    cisco.aci.aci_filter_entry:
      <<: *anstest_fileter_2_present
      entry: tcp_flags_est
      ether_type: ip
      ip_protocol: tcp
      tcp_flags:
        - established
    register: tcp_flags_est

  - name: Create a filter entry with icmp6_msg_type - established
    cisco.aci.aci_filter_entry:
      <<: *anstest_fileter_2_present
      entry: icmp6_msg_type_est
      icmp6_msg_type: neighbor_solicitation
    register: icmp6_msg_type_est

  - name: Assertion check for the filter entry - match_only_fragments, source_port and tcp_flags attributes
    assert:
      that:
        - nt_match_only_fragments_with_dst_port is not changed
        - nt_match_only_fragments_with_dst_port.msg == "Parameter 'match_only_fragments' cannot be used with 'Layer 4 Port' value"
        - match_only_fragments_enabled is changed
        - match_only_fragments_enabled.current.0.vzEntry.attributes.name == "match_only_fragments_enabled"
        - match_only_fragments_enabled.current.0.vzEntry.attributes.tcpRules == match_only_fragments_enabled.current.0.vzEntry.attributes.tcpRules == ""
        - match_only_fragments_enabled.current.0.vzEntry.attributes.applyToFrag == match_only_fragments_enabled.sent.vzEntry.attributes.applyToFrag == "yes"
        - match_only_fragments_enabled.current.0.vzEntry.attributes.sFromPort == match_only_fragments_enabled.current.0.vzEntry.attributes.sToPort == "unspecified"
        - match_only_fragments_enabled.current.0.vzEntry.attributes.dFromPort == match_only_fragments_enabled.current.0.vzEntry.attributes.dToPort == "unspecified"
        - match_only_fragments_disabled is changed
        - match_only_fragments_disabled.current.0.vzEntry.attributes.applyToFrag == match_only_fragments_disabled.sent.vzEntry.attributes.applyToFrag == "no"
        - match_only_fragments_disabled.current.0.vzEntry.attributes.name == "match_only_fragments_enabled"
        - match_only_fragments_disabled.current.0.vzEntry.attributes.tcpRules == ""
        - match_only_fragments_disabled.current.0.vzEntry.attributes.sFromPort == match_only_fragments_disabled.current.0.vzEntry.attributes.sToPort == "unspecified"
        - match_only_fragments_disabled.current.0.vzEntry.attributes.dFromPort == match_only_fragments_disabled.current.0.vzEntry.attributes.dToPort == "unspecified"
        - nt_source_port is not changed
        - nt_source_port.msg == "Parameter 'source_port' cannot be used with 'source_port_end' and 'source_port_start'"
        - nt_dst_port_end is not changed
        - nt_dst_port_end.msg == "Parameter 'dst_port_end' cannot be configured when the 'dst_port_start' is not defined"
        - nt_source_port_end is not changed
        - nt_source_port_end.msg == "Parameter 'source_port_end' cannot be configured when the 'source_port_start' is not defined"
        - source_port_start is changed
        - source_port_start.current.0.vzEntry.attributes.name == source_port_start.sent.vzEntry.attributes.name == "source_port_start"
        - source_port_start.current.0.vzEntry.attributes.sFromPort == source_port_start.sent.vzEntry.attributes.sFromPort == "ftpData"
        - source_port_start.current.0.vzEntry.attributes.sToPort == "ftpData"
        - source_port_start.current.0.vzEntry.attributes.tcpRules == source_port_start.sent.vzEntry.attributes.tcpRules == ""
        - source_port_start.current.0.vzEntry.attributes.applyToFrag == "no"
        - source_port_start.current.0.vzEntry.attributes.arpOpc == "unspecified"
        - source_port_start.current.0.vzEntry.attributes.etherT == "ip"
        - source_port_start.current.0.vzEntry.attributes.prot == "tcp"
        - source_port_values is changed
        - source_port_values.current.0.vzEntry.attributes.name == source_port_values.sent.vzEntry.attributes.name == "source_port_values"
        - source_port_values.current.0.vzEntry.attributes.sFromPort == source_port_values.sent.vzEntry.attributes.sFromPort == "ftpData"
        - source_port_values.current.0.vzEntry.attributes.sToPort == source_port_values.sent.vzEntry.attributes.sToPort == "23"
        - source_port_values.current.0.vzEntry.attributes.tcpRules == source_port_values.sent.vzEntry.attributes.tcpRules == "ack,fin"
        - source_port_values.current.0.vzEntry.attributes.applyToFrag == "no"
        - source_port_values.current.0.vzEntry.attributes.arpOpc == "unspecified"
        - source_port_values.current.0.vzEntry.attributes.etherT == "ip"
        - source_port_values.current.0.vzEntry.attributes.prot == "tcp"
        - update_source_port_values is changed
        - update_source_port_values.current.0.vzEntry.attributes.name == "source_port_values"
        - update_source_port_values.current.0.vzEntry.attributes.applyToFrag == "no"
        - update_source_port_values.current.0.vzEntry.attributes.arpOpc == "unspecified"
        - update_source_port_values.current.0.vzEntry.attributes.etherT == "ip"
        - update_source_port_values.current.0.vzEntry.attributes.prot == "tcp"
        - update_source_port_values.current.0.vzEntry.attributes.sFromPort == update_source_port_values.sent.vzEntry.attributes.sFromPort == "dns"
        - update_source_port_values.current.0.vzEntry.attributes.sToPort == update_source_port_values.sent.vzEntry.attributes.sToPort == "dns"
        - update_source_port_values.current.0.vzEntry.attributes.tcpRules == update_source_port_values.sent.vzEntry.attributes.tcpRules == "ack"
        - nt_tcp_flags is not changed
        - nt_tcp_flags.msg == "TCP established cannot be combined with other tcp rules"
        - tcp_flags_est is changed
        - tcp_flags_est.current.0.vzEntry.attributes.applyToFrag == "no"
        - tcp_flags_est.current.0.vzEntry.attributes.tcpRules == tcp_flags_est.sent.vzEntry.attributes.tcpRules == "est"
        - tcp_flags_est.current.0.vzEntry.attributes.name == tcp_flags_est.sent.vzEntry.attributes.name == "tcp_flags_est"
        - tcp_flags_est.current.0.vzEntry.attributes.etherT == tcp_flags_est.sent.vzEntry.attributes.etherT == "ip"
        - icmp6_msg_type_est.current.0.vzEntry.attributes.icmpv6T == "nbr-solicit"

  - name: create filter entry - check mode works
    cisco.aci.aci_filter_entry: &aci_entry_present
      <<: *aci_filter_present
      entry: anstest
      description: Ansible Test
      ether_type: ip
      ip_protocol: tcp
      dst_port_start: 80
      dst_port_end: 88
    check_mode: true
    register: entry_present_check_mode

  - name: create filter entry - creation works
    cisco.aci.aci_filter_entry:
      <<: *aci_entry_present
    register: entry_present

  - name: create filter entry - idempotency works
    cisco.aci.aci_filter_entry:
      <<: *aci_entry_present
    register: entry_present_idempotent

  - name: update filter entry - update works
    cisco.aci.aci_filter_entry:
      <<: *aci_entry_present
      description: Ansible Test Update
      dst_port: 80
      dst_port_start: "{{ fake_var | default(omit) }}"
      dst_port_end: "{{ fake_var | default(omit) }}"
    register: entry_present_update

  - name: Verify Cloud and Non-Cloud Sites in use.
    include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

  - name: create filter entry - test different types
    cisco.aci.aci_filter_entry:
      <<: *aci_filter_present
      entry: anstest2
      ether_type: arp
      arp_flag: arp_reply
    register: entry_present_2
    when: query_cloud.current == []  # This condition will skip execution for cloud sites

  - name: create filter entry - test different types
    cisco.aci.aci_filter_entry:
      <<: *aci_filter_present
      entry: anstest3
      ether_type: ip
      ip_protocol: icmp
      icmp_msg_type: echo
    register: entry_present_3

  - name: create filter entry - test different types
    cisco.aci.aci_filter_entry:
      <<: *aci_filter_present
      entry: anstest4
      ether_type: ip
      ip_protocol: udp
      dst_port: 1000
    register: entry_present_4

  - name: missing param - failure message works
    cisco.aci.aci_filter_entry:
      <<: *aci_filter_present
    ignore_errors: true
    register: present_missing_param

  - name: incompatable params - failure message works
    cisco.aci.aci_filter_entry:
      <<: *aci_entry_present
      dst_port: 99
    ignore_errors: true
    register: present_incompatible_params

  - name: present assertions
    assert:
      that:
        - entry_present_check_mode is changed
        - entry_present_check_mode.previous == []
        - entry_present_check_mode.sent.vzEntry.attributes.dFromPort == 'http'
        - entry_present_check_mode.sent.vzEntry.attributes.dToPort == '88'
        - entry_present_check_mode.sent.vzEntry.attributes.descr == 'Ansible Test'
        - entry_present_check_mode.sent.vzEntry.attributes.etherT == 'ip'
        - entry_present_check_mode.sent.vzEntry.attributes.name == 'anstest'
        - entry_present_check_mode.sent.vzEntry.attributes.prot == 'tcp'
        - entry_present is changed
        - entry_present.current.0.vzEntry.attributes.annotation == 'orchestrator:ansible'
        - entry_present.previous == []
        - entry_present.sent == entry_present_check_mode.sent
        - entry_present_idempotent is not changed
        - entry_present_idempotent.previous != []
        - entry_present_idempotent.sent == {}
        - entry_present_update is changed
        - entry_present_update.previous != []
        - entry_present_update.sent != entry_present_update.proposed
        - entry_present_3 is changed
        - entry_present_3.sent.vzEntry.attributes.etherT == 'ip'
        - entry_present_3.sent.vzEntry.attributes.icmpv4T == 'echo'
        - entry_present_3.sent.vzEntry.attributes.name == 'anstest3'
        - entry_present_3.sent.vzEntry.attributes.prot == 'icmp'
        - entry_present_4 is changed
        - entry_present_4.sent.vzEntry.attributes.dFromPort == '1000'
        - entry_present_4.sent.vzEntry.attributes.dToPort == '1000'
        - entry_present_4.sent.vzEntry.attributes.etherT == 'ip'
        - entry_present_4.sent.vzEntry.attributes.name == 'anstest4'
        - entry_present_4.sent.vzEntry.attributes.prot == 'udp'
        - present_missing_param is failed
        - 'present_missing_param.msg == "state is present but all of the following are missing: entry"'
        - present_incompatible_params is failed
        - present_incompatible_params.msg.startswith("Parameter")

  - name: present assertions for arp
    assert:
      that:
        - entry_present_2 is changed
        - entry_present_2.sent.vzEntry.attributes.arpOpc == 'reply'
        - entry_present_2.sent.vzEntry.attributes.etherT == 'arp'
        - entry_present_2.sent.vzEntry.attributes.name == 'anstest2'
    when: query_cloud.current == []  # This condition will skip execution for cloud sites

  - name: query tenant filter entry
    cisco.aci.aci_filter_entry: &aci_query_entry
      <<: *aci_entry_present
      state: query
    register: query_tenant_filter_entry

  - name: query filter entry
    cisco.aci.aci_filter_entry:
      <<: *aci_query_entry
      tenant: "{{ fakevar | default(omit) }}"
    register: query_filter_entry

  - name: query tenant entry
    cisco.aci.aci_filter_entry:
      <<: *aci_query_entry
      filter: "{{ fakevar | default(omit) }}"
    register: query_tenant_entry

  - name: query tenant filter
    cisco.aci.aci_filter_entry:
      <<: *aci_query_entry
      entry: "{{ fakevar | default(omit) }}"
    register: query_tenant_filter

  - name: query entry
    cisco.aci.aci_filter_entry: &aci_query_entry_2
      <<: *aci_query_entry
      tenant: "{{ fakevar | default(omit) }}"
      filter: "{{ fakevar | default(omit) }}"
    register: query_entry

  - name: query filter
    cisco.aci.aci_filter_entry:
      <<: *aci_query_entry
      tenant: "{{ fakevar | default(omit) }}"
      entry: "{{ fakevar | default(omit) }}"
    register: query_filter

  - name: query tenant
    cisco.aci.aci_filter_entry:
      <<: *aci_query_entry
      filter: "{{ fakevar | default(omit) }}"
      entry: "{{ fakevar | default(omit) }}"
    register: query_tenant

  - name: query all
    cisco.aci.aci_filter_entry:
      <<: *aci_query_entry_2
      entry: "{{ fakevar | default(omit) }}"
    register: query_all

  - name: query assertions for all
    assert:
      that:
        - query_tenant_filter_entry is not changed
        - query_tenant_filter_entry.current | length == 1
        - query_tenant_filter_entry.current.0.vzEntry.attributes.name == "anstest"
        - '"tn-ansible_test/flt-anstest/e-anstest.json" in query_tenant_filter_entry.url'
        - query_filter_entry is not changed
        - query_filter_entry.current.0.vzFilter.attributes.name == "anstest"
        - query_filter_entry.current.0.vzFilter.children | length == 1
        - '"query-target-filter=eq(vzFilter.name,\"anstest\")" in query_filter_entry.filter_string'
        - '"rsp-subtree-filter=eq(vzEntry.name,\"anstest\")" in query_filter_entry.filter_string'
        - '"class/vzFilter.json" in query_filter_entry.url'
        - query_tenant_entry is not changed
        - query_tenant_entry.current | length == 1
        - query_tenant_entry.current.0.fvTenant.attributes.name == "ansible_test"
        - '"rsp-subtree-filter=eq(vzEntry.name,\"anstest\")" in query_tenant_entry.filter_string'
        - '"rsp-subtree-class=vzEntry" in query_tenant_entry.filter_string'
        - '"tn-ansible_test.json" in query_tenant_entry.url'
        - query_tenant_filter is not changed
        - query_tenant_filter.current | length == 1
        - query_tenant_filter.current.0.vzFilter.attributes.name == "anstest"
        - '"rsp-subtree-class=vzEntry" in query_tenant_filter.filter_string'
        - '"tn-ansible_test/flt-anstest.json" in query_tenant_filter.url'
        - query_entry is not changed
        - query_entry.current.0.vzEntry.attributes.name == "anstest"
        - '"query-target-filter=eq(vzEntry.name,\"anstest\")" in query_entry.filter_string'
        - '"class/vzEntry.json" in query_entry.url'
        - query_filter is not changed
        - query_filter.current.0.vzFilter.attributes.name == "anstest"
        - '"query-target-filter=eq(vzFilter.name,\"anstest\")" in query_filter.filter_string'
        - '"rsp-subtree-class=vzEntry" in query_filter.filter_string'
        - '"class/vzFilter.json" in query_filter.url'
        - query_tenant is not changed
        - query_tenant.current | length == 1
        - query_tenant.current.0.fvTenant.attributes.name == "ansible_test"
        - '"rsp-subtree-class=vzEntry,vzFilter" in query_tenant.filter_string'
        - '"tn-ansible_test.json" in query_tenant.url'
        - query_all is not changed
        - query_all.current | length > 1
        - query_all.current.0.vzEntry is defined
        - '"class/vzEntry.json" in query_all.url'


  - name: query assertions for only Non-Cloud
    assert:
      that:
        - query_tenant_filter.current.0.vzFilter.children | length == 4
    when: query_cloud.current == []  # This condition will skip execution for cloud sites

  - name: delete entry - check mode works
    cisco.aci.aci_filter_entry: &aci_entry_absent
      <<: *aci_entry_present
      state: absent
    check_mode: true
    register: entry_absent_check_mode

  - name: delete entry - deletion works
    cisco.aci.aci_filter_entry:
      <<: *aci_entry_absent
    register: entry_absent

  - name: delete entry - idempotency works
    cisco.aci.aci_filter_entry:
      <<: *aci_entry_absent
    register: entry_absent_idempotent

  - name: missing param - failure message works
    cisco.aci.aci_filter_entry:
      <<: *aci_tenant_present
      state: absent
    ignore_errors: true
    register: absent_missing_param

  - name: cleanup remaining entries
    cisco.aci.aci_filter_entry:
      <<: *aci_entry_absent
      entry: "{{ item }}"
    with_items: ["anstest2", "anstest3", "anstest4"]

  - name: absent assertions
    assert:
      that:
        - entry_absent_check_mode is changed
        - entry_absent_check_mode.previous != []
        - entry_absent is changed
        - entry_absent.previous == entry_absent_check_mode.previous
        - entry_absent.proposed == {}
        - entry_absent_idempotent is not changed
        - entry_absent_idempotent.previous == []
        - absent_missing_param is failed
        - 'absent_missing_param.msg == "state is absent but all of the following are missing: entry, filter"'

  - name: cleanup filter
    cisco.aci.aci_filter:
      <<: *aci_filter_present
      state: absent
    when: filter_present is changed

  - name: cleanup tenant
    cisco.aci.aci_tenant:
      <<: *aci_tenant_present
      state: absent
    when: tenant_present is changed
