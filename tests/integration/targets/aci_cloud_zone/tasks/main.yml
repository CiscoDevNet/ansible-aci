# Test code for the ACI modules
# Copyright: (c) 2020, Cindy Zhao (@cizhao) <cizhao@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

# CLEAN ENVIRONMENT
- name: Set vars
  set_fact:
    aci_info: &aci_info
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: '{{ aci_output_level | default("info") }}'

- name: Verify Cloud and Non-Cloud Sites in use.
  include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Execute tasks only for cloud sites
  when: query_cloud.current | length > 0  # This condition will execute only cloud sites
  block:  # block specifies execution of tasks within, based on conditions
  - name: Query all zones under us-west-1
    aci_cloud_zone:
      <<: *aci_info
      cloud: "{{ cloud_type }}"
      region: "{{ region_2 }}"
      state: query
    register: query_all

  - name: Verify query_all
    assert:
      that:
      - query_all is not changed
      - query_all.current.0.cloudRegion.attributes.name == "{{region_2}}"
      - query_all.current.0.cloudRegion.children | length >= 1

  - name: Query a specific zone under region us-west-1
    aci_cloud_zone:
      <<: *aci_info
      cloud: "{{ cloud_type }}"
      region: "{{ region_2 }}"
      zone: "{{ availability_zone | default(omit) }}"
      state: query
    register: query_zone_1

  - name: Query another specific zone under region us-west-1
    aci_cloud_zone:
      <<: *aci_info
      cloud: "{{ cloud_type }}"
      region: "{{ region_2 }}"
      zone: us-west-1b
      state: query
    register: query_zone_2

  - name: Verify query_zone_1 and query_zone_2
    assert:
      that:
      - query_zone_1 is not changed
      - query_zone_2 is not changed
      - query_zone_1.current.0.cloudZone.attributes.name == "{{availability_zone}}"
      - query_zone_1.current.0.cloudZone.attributes.dn == "uni/clouddomp/provp-{{cloud_type}}/region-{{region_2}}/zone-us-west-1a"
      - query_zone_2.current.0.cloudZone.attributes.name == "us-west-1b"
      - query_zone_2.current.0.cloudZone.attributes.dn == "uni/clouddomp/provp-{{cloud_type}}/region-{{region_2}}/zone-us-west-1b"
    when: query_zone_1.current != []  and query_zone_2.current != []

  - name: Query non_existing zone under region us-west-1
    aci_cloud_zone:
      <<: *aci_info
      cloud: "{{ cloud_type }}"
      region: "{{ region_2 }}"
      zone: non_existing
      state: query
    register: query_non_existing_zone

  - name: Query zone under non_existing region
    aci_cloud_zone:
      <<: *aci_info
      cloud: "{{ cloud_type }}"
      region: non_existing
      zone: "{{ availability_zone | default(omit) }}"
      state: query
    register: query_non_existing_region

  - name: Verify query_non_existing_zone
    assert:
      that:
      - query_non_existing_zone is not changed
      - query_non_existing_zone.current == []
      - query_non_existing_region is not changed
      - query_non_existing_region.current == []
