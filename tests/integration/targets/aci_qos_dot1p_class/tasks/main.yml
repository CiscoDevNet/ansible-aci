# Test code for the ACI modules
# Copyright: (c) 2023, Gaspard Micol (@gmicol) <gmicol@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  ansible.builtin.fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: Set vars
  ansible.builtin.set_fact:
    aci_info: &aci_info
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: '{{ aci_output_level | default("info") }}'

# CLEAN ENVIRONMENT BEFORE TESTS
- name: Remove the ansible_tenant
  cisco.aci.aci_tenant: &aci_tenant_absent
    <<: *aci_info 
    tenant: ansible_tenant
    state: absent

- name: Verify Cloud and Non-Cloud Sites in use.
  ansible.builtin.include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Execute tasks only for non-cloud sites
  when: query_cloud.current == []  # This condition will execute only non-cloud sites
  block:  # block specifies execution of tasks within, based on conditions
  - name: Add a new tenant
    cisco.aci.aci_tenant: &aci_tenant_present
      <<: *aci_info
      tenant: ansible_tenant
      description: Ansible tenant
      state: present

  - name: Add a QoS Custom policy
    cisco.aci.aci_qos_custom_policy:
      <<: *aci_info
      tenant: ansible_tenant
      qos_custom_policy: ansible_qos_custom_policy_1
      description: QoS Custom policy 1 for ansible_tenant tenant
      state: present

  # CREATE QOS Dot1P Class
  - name: Add a QoS Dot1P Class (check_mode)
    cisco.aci.aci_qos_dot1p_class: &aci_qos_dot1p_class_present
      <<: *aci_info
      tenant: ansible_tenant
      qos_custom_policy: ansible_qos_custom_policy_1
      priority: level1
      dot1p_from: best_effort
      dot1p_to: excellent_effort
      dot1p_target: AF31
      target_cos: best_effort
      state: present
    check_mode: true
    register: cm_add_qos_dot1p_class

  - name: Add a QoS Dot1P Class (normal_mode)
    cisco.aci.aci_qos_dot1p_class:
      <<: *aci_qos_dot1p_class_present
    register: nm_add_qos_dot1p_class

  - name: Add the first QoS Dot1P Class again - testing idempotency
    cisco.aci.aci_qos_dot1p_class:
      <<: *aci_qos_dot1p_class_present
    register: nm_add_qos_dot1p_class_idempotency

  - name: Add a second QoS Dot1P Class (normal_mode)
    cisco.aci.aci_qos_dot1p_class:
      <<: *aci_info
      tenant: ansible_tenant
      qos_custom_policy: ansible_qos_custom_policy_1
      dot1p_from: video
      dot1p_to: voice
      state: present
    register: nm_add_qos_dot1p_class_2

  - name: Asserts for QoS Dot1P Class creation tasks
    ansible.builtin.assert:
      that:
        - cm_add_qos_dot1p_class is changed
        - cm_add_qos_dot1p_class.previous == []
        - cm_add_qos_dot1p_class.current == []
        - nm_add_qos_dot1p_class is changed
        - nm_add_qos_dot1p_class.current.0.qosDot1PClass.attributes.prio == "level1"
        - nm_add_qos_dot1p_class.current.0.qosDot1PClass.attributes.from == "1"
        - nm_add_qos_dot1p_class.current.0.qosDot1PClass.attributes.to == "2"
        - nm_add_qos_dot1p_class.current.0.qosDot1PClass.attributes.target == "AF31"
        - nm_add_qos_dot1p_class.current.0.qosDot1PClass.attributes.targetCos == "1"
        - nm_add_qos_dot1p_class.current.0.qosDot1PClass.attributes.dn == "uni/tn-ansible_tenant/qoscustom-ansible_qos_custom_policy_1/dot1P-1-2"
        - nm_add_qos_dot1p_class_idempotency is not changed
        - nm_add_qos_dot1p_class_2 is changed
        - nm_add_qos_dot1p_class_2.previous == []
        - nm_add_qos_dot1p_class_2.current.0.qosDot1PClass.attributes.prio == "unspecified"
        - nm_add_qos_dot1p_class_2.current.0.qosDot1PClass.attributes.from == "4"
        - nm_add_qos_dot1p_class_2.current.0.qosDot1PClass.attributes.to == "5"
        - nm_add_qos_dot1p_class_2.current.0.qosDot1PClass.attributes.target == "unspecified"
        - nm_add_qos_dot1p_class_2.current.0.qosDot1PClass.attributes.targetCos == "unspecified"
        - nm_add_qos_dot1p_class_2.current.0.qosDot1PClass.attributes.dn == "uni/tn-ansible_tenant/qoscustom-ansible_qos_custom_policy_1/dot1P-4-5"

  # QUERY QOS Dot1P Class
  - name: Query all QoS Custom policies
    cisco.aci.aci_qos_dot1p_class:
      <<: *aci_info
      state: query
    register: query_all_qos_dot1p_class

  - name: Query ansible_qos_dot1p_class_1
    cisco.aci.aci_qos_dot1p_class:
      <<: *aci_qos_dot1p_class_present
      state: query
    register: query_ansible_qos_dot1p_class_1

  - name: Asserts query tasks
    ansible.builtin.assert:
      that:
        - query_all_qos_dot1p_class is not changed
        - query_all_qos_dot1p_class.current|length >= 2
        - query_ansible_qos_dot1p_class_1 is not changed
        - query_ansible_qos_dot1p_class_1.current.0.qosDot1PClass.attributes.prio == "level1"
        - query_ansible_qos_dot1p_class_1.current.0.qosDot1PClass.attributes.from == "1"
        - query_ansible_qos_dot1p_class_1.current.0.qosDot1PClass.attributes.to == "2"
        - query_ansible_qos_dot1p_class_1.current.0.qosDot1PClass.attributes.target == "AF31"
        - query_ansible_qos_dot1p_class_1.current.0.qosDot1PClass.attributes.targetCos == "1"
        - query_ansible_qos_dot1p_class_1.current.0.qosDot1PClass.attributes.dn == "uni/tn-ansible_tenant/qoscustom-ansible_qos_custom_policy_1/dot1P-1-2"

  # DELETE QOS Dot1P Class
  - name: Remove QoS Dot1P Class (check_mode)
    cisco.aci.aci_qos_dot1p_class: &qos_dot1p_class_absent
      <<: *aci_qos_dot1p_class_present
      state: absent
    check_mode: true
    register: cm_remove_qos_dot1p_class

  - name: Remove QoS Dot1P Class (normal_mode)
    cisco.aci.aci_qos_dot1p_class:
      <<: *qos_dot1p_class_absent
    register: nm_remove_qos_dot1p_class

  - name: Remove QoS Dot1P Class - testing idempotency
    cisco.aci.aci_qos_dot1p_class:
      <<: *qos_dot1p_class_absent
    register: nm_remove_qos_dot1p_class_idempotency

  - name: Asserts deletion tasks
    ansible.builtin.assert:
      that:
        - cm_remove_qos_dot1p_class is changed
        - cm_remove_qos_dot1p_class.proposed == {}
        - nm_remove_qos_dot1p_class is changed
        - nm_remove_qos_dot1p_class.previous != []
        - nm_remove_qos_dot1p_class.current == []
        - nm_remove_qos_dot1p_class_idempotency is not changed
        - nm_remove_qos_dot1p_class_idempotency.previous == []

  # CLEAN ENVIRONMENT BEFORE ENDING TESTS
  - name: Remove the ansible_tenant - cleanup before ending tests
    cisco.aci.aci_tenant:
      <<: *aci_tenant_present
      state: absent
