# Test code for the ACI modules
# Copyright: (c) 2023, Abraham Mughal (@abmughal)

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: Set vars
  set_fact:
    aci_info: &aci_info
      host: '{{ aci_hostname }}'
      username: '{{ aci_username }}'
      password: '{{ aci_password }}'
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: '{{ aci_output_level | default("debug") }}'

- name: delete existing tenant
  cisco.aci.aci_tenant: 
    <<: *aci_info
    state: absent
    tenant: ansible_test3
  register: tenant_present

- name: ensure tenant exists for tests to kick off
  cisco.aci.aci_tenant: &aci_tenant_present
    <<: *aci_info
    state: present
    tenant: ansible_test3
  register: tenant_present

- name: create vrf 
  cisco.aci.aci_vrf: &aci_vrf_present
    <<: *aci_tenant_present
    vrf: test
    description: Ansible Test
  register: vrf_present

- name: create second vrf - creation works
  cisco.aci.aci_vrf:
    <<: *aci_vrf_present
    vrf: test2
  register: vrf_present

- name: create third vrf - creation works
  cisco.aci.aci_vrf:
    <<: *aci_vrf_present
    vrf: test3
  register: vrf_present

- name: create leak internal subnet - check_mode
  cisco.aci.aci_vrf_leak_internal_subnet: &aci_leak_internal_subnet
    <<: *aci_info
    state: present
    tenant: ansible_test3
    vrf: test
    ip: 1.1.1.2
    leak_internal_subnet: 
      - vrf: "test2"
        tenant: "ansible_test3"
      - vrf: "test3"
        tenant: "ansible_test3"
    description: Ansible Test
  check_mode: true
  register: leak_sub_check_mode

- name: create leak internal subnet 
  cisco.aci.aci_vrf_leak_internal_subnet:
    <<: *aci_leak_internal_subnet
  register: leak_sub_present

- name: create leak internal subnet - idempotency check
  cisco.aci.aci_vrf_leak_internal_subnet: 
    <<: *aci_info
    state: present
    tenant: ansible_test3
    vrf: test
    ip: 1.1.1.2
    leak_internal_subnet: 
      - vrf: "test2"
        tenant: "ansible_test3"
      - vrf: "test3"
        tenant: "ansible_test3"
    description: Ansible Test
  register: leak_sub_idempotent

- name: create second leak internal subnet
  cisco.aci.aci_vrf_leak_internal_subnet: 
    <<: *aci_info
    tenant: ansible_test3
    vrf: test2
    leak_internal_subnet: 
      - vrf: "test"
        tenant: "ansible_test3"
    description: Ansible Test
    ip: 1.1.1.2
  register: leak_sub_present_2

- name: present asserts
  assert:
    that:
      - vrf_present is changed
      - leak_sub_check_mode is changed
      - leak_sub_present.sent.leakRoutes.children.0.leakInternalSubnet.children.0.leakTo.attributes.ctxName == 'test2'
      - leak_sub_present.sent.leakRoutes.children.0.leakInternalSubnet.children.0.leakTo.attributes.tenantName == 'ansible_test3'
      - leak_sub_present.sent.leakRoutes.children.0.leakInternalSubnet.children.1.leakTo.attributes.ctxName == 'test3'
      - leak_sub_present.sent.leakRoutes.children.0.leakInternalSubnet.children.1.leakTo.attributes.tenantName == 'ansible_test3'
      - leak_sub_idempotent is not changed
      - leak_sub_present_2.sent.leakRoutes.children.0.leakInternalSubnet.children.0.leakTo.attributes.ctxName == 'test'
      - leak_sub_present_2.sent.leakRoutes.children.0.leakInternalSubnet.children.0.leakTo.attributes.tenantName == 'ansible_test3'

- name: query all
  cisco.aci.aci_vrf_leak_internal_subnet: &aci_query
    <<: *aci_tenant_present
    state: query
  register: query_all

- name: query vrf
  cisco.aci.aci_vrf_leak_internal_subnet: 
    <<: *aci_tenant_present
    state: query
    vrf: test
  register: query

- name: absent case
  cisco.aci.aci_vrf_leak_internal_subnet: 
    <<: *aci_info
    tenant: ansible_test3
    vrf: test2
    leak_internal_subnet: 
      - vrf: "test"
        tenant: "ansible_test3"
    description: Ansible Test
    ip: 1.1.1.2
    state: absent
  register: leak_sub_absent

- name: query asserts
  assert:
    that:
      - query_all is not changed
      - query is not changed
      - query_all.current.0.fvTenant.children.0.fvCtx.children.0.leakRoutes.children.0.leakInternalSubnet.children.0.leakTo.attributes.ctxName == 'test'
      - query_all.current.0.fvTenant.children.0.fvCtx.children.0.leakRoutes.children.0.leakInternalSubnet.children.0.leakTo.attributes.tenantName == 'ansible_test3'
      - query.current.0.leakRoutes.children.0.leakInternalSubnet.children.0.leakTo.attributes.ctxName == 'test3'
      - query.current.0.leakRoutes.children.0.leakInternalSubnet.children.0.leakTo.attributes.tenantName == 'ansible_test3'
      - leak_sub_absent.proposed == {}

- name: delete leak internal subnet
  cisco.aci.aci_vrf_leak_internal_subnet: 
    <<: *aci_vrf_present
    vrf: test
    leak_internal_subnet: 
      - vrf: "test3"
        tenant: "ansible_test3"
    ip: 1.1.1.2
  register: leak_sub_delete

- name: delete leak internal subnet again
  cisco.aci.aci_vrf_leak_internal_subnet: 
    <<: *aci_vrf_present
    vrf: test
    leak_internal_subnet: 
      - vrf: "test2"
        tenant: "ansible_test3"
    ip: 1.1.1.2
  register: leak_sub_delete_2

- name: delete asserts
  assert:
    that:
      - leak_sub_delete is changed
      - leak_sub_delete.previous != []
      - leak_sub_delete_2 is changed
      - leak_sub_delete.sent.leakInternalSubnet.children.0.leakTo.attributes.ctxName == 'test2'
      - leak_sub_delete.sent.leakInternalSubnet.children.0.leakTo.attributes.status == 'deleted'
      - leak_sub_delete_2.sent.leakInternalSubnet.children.0.leakTo.attributes.ctxName == 'test2'
      - leak_sub_delete_2.sent.leakInternalSubnet.children.1.leakTo.attributes.ctxName == 'test3'
      - leak_sub_delete_2.sent.leakInternalSubnet.children.1.leakTo.attributes.status == 'deleted'