# Test code for the ACI modules
# Copyright: (c) 2023, Gaspard Micol (@gmicol) <gmicol@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: Set vars
  set_fact:
    aci_info: &aci_info
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: debug

- name: Verify Cloud and Non-Cloud Sites in use.
  include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Execute tasks only for non-cloud sites
  when: query_cloud.current == []  # This condition will execute only non-cloud sites
  block:  # block specifies execution of tasks within, based on conditions
  # Clean Environment
  - name: create tenant
    aci_tenant: &aci_tenant_present
      <<: *aci_info
      tenant: ansible_test
      state: present

  - name: Ensure first EP retention protocol policy does not exist
    aci_tenant_ep_retention_policy: &aci_tenant_ep_retention_policy_absent
      <<: *aci_tenant_present
      name: ep_policy_anstest
      description: test for EP retention protocol policy
      bounce_age: 300
      bounce_trigger: flood
      hold_interval: 600
      local_ep_interval: 1800
      remote_ep_interval: 600
      move_frequency: 512
      state: absent

  - name: Ensure second EP retention protocol policy does not exist
    aci_tenant_ep_retention_policy: &aci_tenant_ep_retention_policy_2_absent
      <<: *aci_tenant_present
      name: ep_policy_anstest_2
      bounce_age: 0
      local_ep_interval: 0
      remote_ep_interval: 0
      move_frequency: 0
      state: absent

  - name: Create first EP retention protocol policy (check_mode)
    aci_tenant_ep_retention_policy: &aci_tenant_ep_retention_policy_present
      <<: *aci_tenant_ep_retention_policy_absent
      state: present
    check_mode: true
    register: cm_add_tenant_ep_retention_policy_1

  - name: Create first EP retention protocol policy (normal_mode)
    aci_tenant_ep_retention_policy:
      <<: *aci_tenant_ep_retention_policy_present
    register: nm_add_tenant_ep_retention_policy_1

  - name: Create first EP retention protocol policy again - testing idempotency
    aci_tenant_ep_retention_policy:
      <<: *aci_tenant_ep_retention_policy_present
    register: idempotency_add_tenant_ep_retention_policy_1

  - name: Create second EP retention protocol policy
    aci_tenant_ep_retention_policy: &aci_tenant_ep_retention_policy_2_present
      <<: *aci_tenant_ep_retention_policy_2_absent
      state: present
    register: nm_add_tenant_ep_retention_policy_2

  - name: Modify EP retention protocol policy bounce age - testing failure message
    aci_tenant_ep_retention_policy:
      <<: *aci_tenant_ep_retention_policy_present
      bounce_age: 100
    ignore_errors: true
    register: Modify_tenant_ep_retention_policy_bounce_age

  - name: Modify EP retention protocol policy hold interval - testing failure message
    aci_tenant_ep_retention_policy:
      <<: *aci_tenant_ep_retention_policy_present
      hold_interval: 4
    ignore_errors: true
    register: Modify_tenant_ep_retention_policy_hold_interval
  
  - name: Modify EP retention protocol policy move frequency - testing failure message
    aci_tenant_ep_retention_policy:
      <<: *aci_tenant_ep_retention_policy_present
      move_frequency: 65540
    ignore_errors: true
    register: Modify_tenant_ep_retention_policy_move_frequency

  - name: Modify EP retention protocol policy local ep interval - testing failure message
    aci_tenant_ep_retention_policy:
      <<: *aci_tenant_ep_retention_policy_present
      local_ep_interval: 119
    ignore_errors: true
    register: Modify_tenant_ep_retention_policy_local_ep_interval

  - name: Modify EP retention protocol policy remote ep interval - testing failure message
    aci_tenant_ep_retention_policy:
      <<: *aci_tenant_ep_retention_policy_present
      remote_ep_interval: 119
    ignore_errors: true
    register: Modify_tenant_ep_retention_policy_remote_ep_interval

  - name: Asserts for creation tasks
    assert:
      that:
        - cm_add_tenant_ep_retention_policy_1 is changed
        - cm_add_tenant_ep_retention_policy_1.previous == []
        - cm_add_tenant_ep_retention_policy_1.current == []
        - nm_add_tenant_ep_retention_policy_1 is changed
        - nm_add_tenant_ep_retention_policy_1.current.0.fvEpRetPol.attributes.name == "ep_policy_anstest"
        - nm_add_tenant_ep_retention_policy_1.current.0.fvEpRetPol.attributes.bounceAgeIntvl == "300"
        - nm_add_tenant_ep_retention_policy_1.current.0.fvEpRetPol.attributes.bounceTrig == "rarp-flood"
        - nm_add_tenant_ep_retention_policy_1.current.0.fvEpRetPol.attributes.holdIntvl == "600"
        - nm_add_tenant_ep_retention_policy_1.current.0.fvEpRetPol.attributes.localEpAgeIntvl == "1800"
        - nm_add_tenant_ep_retention_policy_1.current.0.fvEpRetPol.attributes.moveFreq == "512"
        - nm_add_tenant_ep_retention_policy_1.current.0.fvEpRetPol.attributes.remoteEpAgeIntvl == "600"
        - idempotency_add_tenant_ep_retention_policy_1 is not changed
        - nm_add_tenant_ep_retention_policy_2 is changed
        - nm_add_tenant_ep_retention_policy_2.current.0.fvEpRetPol.attributes.bounceAgeIntvl == "infinite"
        - nm_add_tenant_ep_retention_policy_2.current.0.fvEpRetPol.attributes.bounceTrig == "protocol"
        - nm_add_tenant_ep_retention_policy_2.current.0.fvEpRetPol.attributes.holdIntvl == "300"
        - nm_add_tenant_ep_retention_policy_2.current.0.fvEpRetPol.attributes.localEpAgeIntvl == "infinite"
        - nm_add_tenant_ep_retention_policy_2.current.0.fvEpRetPol.attributes.moveFreq == "none"
        - nm_add_tenant_ep_retention_policy_2.current.0.fvEpRetPol.attributes.remoteEpAgeIntvl == "infinite"
        - nm_add_tenant_ep_retention_policy_2.current.0.fvEpRetPol.attributes.name == "ep_policy_anstest_2"
        - Modify_tenant_ep_retention_policy_bounce_age.msg == "The bounce_age must be a value of 0 or between 150 and 65535"
        - Modify_tenant_ep_retention_policy_hold_interval.msg == "The hold_interval must be a value between 5 and 65535"
        - Modify_tenant_ep_retention_policy_move_frequency.msg == "The move_frequency must be a value between 0 and 65535"
        - Modify_tenant_ep_retention_policy_local_ep_interval.msg == "The local_ep_interval must be a value of 0 or between 120 and 65535"
        - Modify_tenant_ep_retention_policy_remote_ep_interval.msg == "The remote_ep_interval must be a value of 0 or between 120 and 65535"

  - name: Query all EP retention protocol policies
    aci_tenant_ep_retention_policy:
      <<: *aci_info
      state: query
    register: query_all_tenant_ep_retention_policy

  - name: Query first EP retention protocol policy
    aci_tenant_ep_retention_policy:
      <<: *aci_tenant_ep_retention_policy_present
      state: query
    register: query_first_tenant_ep_retention_policy

  - name: Asserts for query tasks
    assert:
      that:
        - query_all_tenant_ep_retention_policy is not changed
        - query_all_tenant_ep_retention_policy.current | length >= 2
        - '"class/fvEpRetPol.json" in query_all_tenant_ep_retention_policy.url'
        - query_first_tenant_ep_retention_policy is not changed
        - query_first_tenant_ep_retention_policy.current.0.fvEpRetPol.attributes.name == "ep_policy_anstest"
        - query_first_tenant_ep_retention_policy.current.0.fvEpRetPol.attributes.bounceAgeIntvl == "300"
        - query_first_tenant_ep_retention_policy.current.0.fvEpRetPol.attributes.bounceTrig == "rarp-flood"
        - query_first_tenant_ep_retention_policy.current.0.fvEpRetPol.attributes.holdIntvl == "600"
        - query_first_tenant_ep_retention_policy.current.0.fvEpRetPol.attributes.localEpAgeIntvl == "1800"
        - query_first_tenant_ep_retention_policy.current.0.fvEpRetPol.attributes.moveFreq == "512"
        - query_first_tenant_ep_retention_policy.current.0.fvEpRetPol.attributes.remoteEpAgeIntvl == "600"

  - name: Delete first EP retention protocol policy (check_mode)
    aci_tenant_ep_retention_policy:
      <<: *aci_tenant_ep_retention_policy_present
      state: absent
    check_mode: true
    register: cm_delete_tenant_ep_retention_policy_1

  - name: Delete first EP retention protocol policy (normal_mode)
    aci_tenant_ep_retention_policy:
      <<: *aci_tenant_ep_retention_policy_present
      state: absent
    register: nm_delete_tenant_ep_retention_policy_1

  - name: Delete first EP retention protocol policy again - testing idempotency
    aci_tenant_ep_retention_policy:
      <<: *aci_tenant_ep_retention_policy_present
      state: absent
    register: idempotency_delete_tenant_ep_retention_policy_1

  - name: Delete second EP retention protocol policy (normal_mode)
    aci_tenant_ep_retention_policy:
      <<: *aci_tenant_ep_retention_policy_2_present
      state: absent
    register: nm_delete_tenant_ep_retention_policy_2

  - name: Asserts for deletion tasks
    assert:
      that:
        - cm_delete_tenant_ep_retention_policy_1 is changed
        - cm_delete_tenant_ep_retention_policy_1.proposed == {}
        - nm_delete_tenant_ep_retention_policy_1 is changed
        - nm_delete_tenant_ep_retention_policy_1.previous != []
        - nm_delete_tenant_ep_retention_policy_1.current == []
        - idempotency_delete_tenant_ep_retention_policy_1 is not changed
        - idempotency_delete_tenant_ep_retention_policy_1.previous == []
        - nm_delete_tenant_ep_retention_policy_2 is changed
        - nm_delete_tenant_ep_retention_policy_2.previous != []
        - nm_delete_tenant_ep_retention_policy_2.current == []

  - name: Delete tenant - clean up the environment
    aci_tenant:
      <<: *aci_tenant_present
      state: absent