# Copyright: (c) 2023, Tim Cragg (@timcragg) <tcragg@cisco.com>
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

# SET VARS
- name: Set vars
  set_fact:
    aci_info: &aci_info
      host: '{{ aci_hostname }}'
      username: '{{ aci_username }}'
      password: '{{ aci_password }}'
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: '{{ aci_output_level | default("info") }}'

# CLEAN ENVIRONMENT
- name: Remove test tenant before we kickoff
  cisco.aci.aci_tenant: &tenant_absent
    <<: *aci_info
    tenant: ansible_tenant
    state: absent

- name: Verify Cloud and Non-Cloud Sites in use.
  include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Execute tasks only for non-cloud sites
  when: query_cloud.current == []  # This condition will execute only non-cloud sites
  block:  # block specifies execution of tasks within, based on conditions

# SETUP ENVIRONMENT
  - name: Create tenant
    cisco.aci.aci_tenant: &tenant_present
      <<: *tenant_absent
      state: present

  - name: Add route control subject
    cisco.aci.aci_route_control_subject:
      <<: *aci_info
      tenant: ansible_tenant
      subject_name: ansible_rtctrl_subject
      state: present

# BEGIN WITH TESTS
  - name: Add route control match destination (check_mode)
    cisco.aci.aci_route_control_match_dest: &match_dest_present
      <<: *aci_info
      tenant: ansible_tenant
      subject_name: ansible_rtctrl_subject
      ip: 10.20.30.0/24
      aggregate: no
      gt: 26
      lt: 28
      state: present
    check_mode: true
    register: cm_add_match_dest

  - name: Add match destination (normal mode)
    cisco.aci.aci_route_control_match_dest:
      <<: *match_dest_present
    register: nm_add_match_dest

  - name: Verify add match destination
    ansible.builtin.assert:
      that:
      - cm_add_match_dest is changed
      - nm_add_match_dest is changed
      - cm_add_match_dest.previous == nm_add_match_dest.previous == []
      - cm_add_match_dest.sent.rtctrlMatchRtDest.attributes.ip == nm_add_match_dest.sent.rtctrlMatchRtDest.attributes.ip == '10.20.30.0/24'
      - cm_add_match_dest.sent.rtctrlMatchRtDest.attributes.fromPfxLen == nm_add_match_dest.sent.rtctrlMatchRtDest.attributes.fromPfxLen == '26'
      - cm_add_match_dest.sent.rtctrlMatchRtDest.attributes.toPfxLen == nm_add_match_dest.sent.rtctrlMatchRtDest.attributes.toPfxLen == '28'
      - cm_add_match_dest.sent.rtctrlMatchRtDest.attributes.aggregate == nm_add_match_dest.sent.rtctrlMatchRtDest.attributes.aggregate == 'no'

  - name: Add match destination again, check if idempotency works
    cisco.aci.aci_route_control_match_dest:
      <<: *match_dest_present
    register: add_match_dest_again

  - name: Verify add_match_dest_again
    ansible.builtin.assert:
      that:
      - add_match_dest_again is not changed

  - name: Add second route control match destination
    cisco.aci.aci_route_control_match_dest:
      <<: *aci_info
      tenant: ansible_tenant
      subject_name: ansible_rtctrl_subject
      ip: 10.20.31.0/24
      aggregate: false
      gt: 26
      lt: 28
      state: present

  - name: Add invalid IPv4 route control match destination
    cisco.aci.aci_route_control_match_dest:
      <<: *aci_info
      tenant: ansible_tenant
      subject_name: ansible_rtctrl_subject
      ip: 10.20.31.300/24
      state: present
    register: invalid_ipv4
    ignore_errors: true

  - name: Add invalid IPv6 route control match destination
    cisco.aci.aci_route_control_match_dest:
      <<: *aci_info
      tenant: ansible_tenant
      subject_name: ansible_rtctrl_subject
      ip: fe80:fgh::/64
      state: present
    register: invalid_ipv6
    ignore_errors: true

  - name: Add route control match destination without pfx length
    cisco.aci.aci_route_control_match_dest:
      <<: *aci_info
      tenant: ansible_tenant
      subject_name: ansible_rtctrl_subject
      ip: 10.20.32.0
      state: present
    register: no_pfx_length
    ignore_errors: true

  - name: Add route control match destination with invalid greater_than
    cisco.aci.aci_route_control_match_dest:
      <<: *aci_info
      tenant: ansible_tenant
      subject_name: ansible_rtctrl_subject
      ip: 10.20.32.0/24
      greater_than: 22
      state: present
    register: invalid_gt
    ignore_errors: true
  
  - name: Add route control match destination with invalid less_than
    cisco.aci.aci_route_control_match_dest:
      <<: *aci_info
      tenant: ansible_tenant
      subject_name: ansible_rtctrl_subject
      ip: 10.20.32.0/24
      greater_than: 29
      less_than: 28
      state: present
    register: invalid_lt
    ignore_errors: true

  - name: Verify error handling
    ansible.builtin.assert:
      that:
      - invalid_ipv4 is failed
      - invalid_ipv4.msg == "ip must be a valid IPv4 or IPv6 prefix, e.g. '10.20.30.0/24' or 'fd80::/64'"
      - invalid_ipv6 is failed
      - invalid_ipv6.msg == "ip must be a valid IPv4 or IPv6 prefix, e.g. '10.20.30.0/24' or 'fd80::/64'"
      - no_pfx_length is failed
      - no_pfx_length.msg == "ip must include the prefix length, e.g. '10.20.30.0/24' or 'fd80::/64'"
      - invalid_gt is failed
      - invalid_gt.msg == "greater_than must be greater than the prefix mask"
      - invalid_lt is failed
      - invalid_lt.msg == "greater_than must be less than less_than"

# UPDATE MATCH DESTINATION
  - name: Update Match Destination
    cisco.aci.aci_route_control_match_dest:
      <<: *match_dest_present
      aggregate: true
      gt: 0
      lt: 0
    register: update_match_dest

  - name: Verify update_match_dest
    ansible.builtin.assert:
      that:
      - update_match_dest is changed
      - update_match_dest.current.0.rtctrlMatchRtDest.attributes.ip == '10.20.30.0/24'
      - update_match_dest.current.0.rtctrlMatchRtDest.attributes.fromPfxLen == '0'
      - update_match_dest.current.0.rtctrlMatchRtDest.attributes.toPfxLen == '0'
      - update_match_dest.current.0.rtctrlMatchRtDest.attributes.aggregate == 'yes'

# QUERY ALL MATCH DESTINATIONS
  - name: Query all match destinations
    cisco.aci.aci_route_control_match_dest:
      <<: *aci_info
      state: query
    register: query_all_match_destinations

  - name: Verify query_all_match_destinations
    ansible.builtin.assert:
      that:
      - query_all_match_destinations is not changed
      - query_all_match_destinations.current | length > 1

# QUERY A SPECIFIC MATCH DESTINATION
  - name: Query a specific match destination
    cisco.aci.aci_route_control_match_dest:
      <<: *match_dest_present
      state: query
    register: query_spec_match_dest

  - name: Verify query_spec_subject
    ansible.builtin.assert:
      that:
      - query_spec_match_dest is not changed
      - query_spec_match_dest.current | length == 1
      - query_spec_match_dest.current.0.rtctrlMatchRtDest.attributes.ip == '10.20.30.0/24'
      - query_spec_match_dest.current.0.rtctrlMatchRtDest.attributes.fromPfxLen == '0'
      - query_spec_match_dest.current.0.rtctrlMatchRtDest.attributes.toPfxLen == '0'
      - query_spec_match_dest.current.0.rtctrlMatchRtDest.attributes.aggregate == 'yes'


# REMOVE MATCH DESTINATION
  - name: Remove match destination
    cisco.aci.aci_route_control_match_dest:
      <<: *match_dest_present
      state: absent
    register: remove_match_dest

  - name: Verify remove_subject
    ansible.builtin.assert:
      that:
      - remove_match_dest is changed
      - remove_match_dest.current == []

# REMOVE MATCH DESTINATION AGAIN TO TEST IDEMPOTENCE
  - name: Remove match destination again
    cisco.aci.aci_route_control_match_dest:
      <<: *match_dest_present
      state: absent
    register: remove_match_dest_again

  - name: Verify remove_match_dest_again
    ansible.builtin.assert:
      that:
      - remove_match_dest_again is not changed
      - remove_match_dest_again.current == []

# CLEAN UP
  - name: Remove test tenant
    cisco.aci.aci_tenant:
      <<: *tenant_absent
