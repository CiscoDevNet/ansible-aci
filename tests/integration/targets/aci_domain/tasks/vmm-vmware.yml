# Test code for the ACI modules
# Copyright: (c) 2018, Dag Wieers (@dagwieers) <dag@wieers.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

# CLEAN ENVIRONMENT
- name: Remove VMM domain
  cisco.aci.aci_domain: &domain_absent
    host: "{{ aci_hostname }}"
    username: "{{ aci_username }}"
    password: "{{ aci_password }}"
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    domain: vmm_dom
    domain_type: vmm
    vm_provider: vmware
    state: absent

- name: Verify Cloud and Non-Cloud Sites in use.
  include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Execute tasks only for non-cloud sites
  when: query_cloud.current == []  # This condition will skip execution for cloud sites
  block:
  # ADD DOMAIN
  - name: Add VMM domain (check_mode)
    cisco.aci.aci_domain: &domain_present
      host: '{{ aci_hostname }}'
      username: '{{ aci_username }}'
      password: '{{ aci_password }}'
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: '{{ aci_output_level | default("info") }}'
      domain: vmm_dom
      domain_type: vmm
      vm_provider: vmware
      access_mode: read-write
      enable_vm_folder: true
      state: present
    check_mode: yes
    register: cm_add_domain

  - name: Add VMM domain (normal mode)
    cisco.aci.aci_domain: *domain_present
    register: nm_add_domain

  - name: Verify VMM add_domain
    assert:
      that:
      - cm_add_domain is changed
      - nm_add_domain is changed
      - cm_add_domain.sent.vmmDomP.attributes.name == nm_add_domain.sent.vmmDomP.attributes.name == 'vmm_dom'
      - cm_add_domain.proposed.vmmDomP.attributes.name == nm_add_domain.proposed.vmmDomP.attributes.name == 'vmm_dom'
      - cm_add_domain.current == cm_add_domain.previous == nm_add_domain.previous == []
      - nm_add_domain.current.0.vmmDomP.attributes.dn == 'uni/vmmp-VMware/dom-vmm_dom'
      - nm_add_domain.current.0.vmmDomP.attributes.name == 'vmm_dom'

  - name: Add VMM domain again (check_mode)
    cisco.aci.aci_domain: *domain_present
    check_mode: yes
    register: cm_add_domain_again

  - name: Add VMM domain again (normal mode)
    cisco.aci.aci_domain: *domain_present
    register: nm_add_domain_again

  - name: Verify VMM add_domain_again
    assert:
      that:
      - cm_add_domain_again is not changed
      - nm_add_domain_again is not changed
  
  - name: Update VMM domain with tag collection and infra port groups (check_mode)
    cisco.aci.aci_domain:
      <<: *domain_present
      add_infra_pg: true
      tag_collection: true
    check_mode: yes
    register: cm_update_domain
    when: version.current.0.topSystem.attributes.version is version('4.1', '>=')

  - name: Update VMM domain with tag collection and infra port groups (normal mode)
    cisco.aci.aci_domain:
      <<: *domain_present
      add_infra_pg: true
      tag_collection: true
    register: nm_update_domain
    when: version.current.0.topSystem.attributes.version is version('4.1', '>=')

  - name: Verify update_domain
    assert:
      that:
      - cm_update_domain is changed
      - nm_update_domain is changed
      - cm_update_domain.previous.0.vmmDomP.attributes.configInfraPg == nm_update_domain.previous.0.vmmDomP.attributes.configInfraPg == 'no'
      - cm_update_domain.proposed.vmmDomP.attributes.configInfraPg == nm_update_domain.current.0.vmmDomP.attributes.configInfraPg == 'yes'
      - cm_update_domain.previous.0.vmmDomP.attributes.enableTag == nm_update_domain.previous.0.vmmDomP.attributes.enableTag == 'no'
      - cm_update_domain.proposed.vmmDomP.attributes.enableTag == nm_update_domain.current.0.vmmDomP.attributes.enableTag == 'yes'
    when: version.current.0.topSystem.attributes.version is version('4.1', '>=')

  # QUERY ALL DOMAINS
  - name: Query all VMM domains (check_mode)
    cisco.aci.aci_domain: &domain_query
      host: '{{ aci_hostname }}'
      username: '{{ aci_username }}'
      password: '{{ aci_password }}'
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: '{{ aci_output_level | default("info") }}'
      domain_type: vmm
      vm_provider: vmware
      state: query
    check_mode: yes
    register: cm_query_all_domains

  - name: Query all VMM domains (normal mode)
    cisco.aci.aci_domain: *domain_query
    register: nm_query_all_domains

  - name: Verify query_all_domains
    assert:
      that:
      - cm_query_all_domains is not changed
      - nm_query_all_domains is not changed
      - cm_query_all_domains == nm_query_all_domains
      - nm_query_all_domains.current|length >= 1


  # QUERY A DOMAIN
  - name: Query our VMM domain (check_mode)
    cisco.aci.aci_domain:
      <<: *domain_query
      domain: vmm_dom
      vm_provider: vmware
    check_mode: yes
    register: cm_query_domain

  - name: Query our VMM domain (normal mode)
    cisco.aci.aci_domain:
      <<: *domain_query
      domain: vmm_dom
      vm_provider: vmware
    register: nm_query_domain

  - name: Verify VMM query_domain
    assert:
      that:
      - cm_query_domain is not changed
      - nm_query_domain is not changed
      - cm_query_domain == nm_query_domain
      - nm_query_domain.current.0.vmmDomP.attributes.dn == 'uni/vmmp-VMware/dom-vmm_dom'
      - nm_query_domain.current.0.vmmDomP.attributes.name == 'vmm_dom'

  # REMOVE DOMAIN
  - name: Remove VMM domain (check_mode)
    cisco.aci.aci_domain: *domain_absent
    check_mode: yes
    register: cm_remove_domain

  - name: Remove VMM domain (normal mode)
    cisco.aci.aci_domain: *domain_absent
    register: nm_remove_domain

  - name: Verify VMM remove_domain
    assert:
      that:
      - cm_remove_domain is changed
      - nm_remove_domain is changed
      - cm_remove_domain.current == cm_remove_domain.previous == nm_remove_domain.previous
      - nm_remove_domain.previous.0.vmmDomP.attributes.dn == 'uni/vmmp-VMware/dom-vmm_dom'
      - nm_remove_domain.previous.0.vmmDomP.attributes.name == 'vmm_dom'
      - nm_remove_domain.current == []

  - name: Remove VMM domain again (check_mode)
    cisco.aci.aci_domain: *domain_absent
    check_mode: yes
    register: cm_remove_domain_again

  - name: Remove VMM domain again (normal mode)
    cisco.aci.aci_domain: *domain_absent
    register: nm_remove_domain_again

  - name: Verify VMM remove_domain_again
    assert:
      that:
      - cm_remove_domain_again is not changed
      - nm_remove_domain_again is not changed


  # QUERY NON-EXISTING DOMAIN
  - name: Query non-existing VMM domain (check_mode)
    cisco.aci.aci_domain:
      <<: *domain_query
      domain: vmm_dom
      vm_provider: vmware
    check_mode: yes
    register: cm_query_non_domain

  - name: Query non-existing VMM domain (normal mode)
    cisco.aci.aci_domain:
      <<: *domain_query
      domain: vmm_dom
      vm_provider: vmware
    register: nm_query_non_domain

  - name: Verify VMM query_non_domain
    assert:
      that:
      - cm_query_non_domain is not changed
      - nm_query_non_domain is not changed
      - cm_query_non_domain == nm_query_non_domain
      - nm_query_non_domain.current == []
