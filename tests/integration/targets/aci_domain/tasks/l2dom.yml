# Test code for the ACI modules
# Copyright: (c) 2018, Dag Wieers (@dagwieers) <dag@wieers.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)


# CLEAN ENVIRONMENT
- name: Remove L2 domain
  cisco.aci.aci_domain: &domain_absent
    host: "{{ aci_hostname }}"
    username: "{{ aci_username }}"
    password: "{{ aci_password }}"
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    domain: l2_dom
    domain_type: l2dom
    state: absent


# ADD DOMAIN
- name: Add L2 domain (check_mode)
  cisco.aci.aci_domain: &domain_present
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    domain: l2_dom
    domain_type: l2dom
    state: present
  check_mode: true
  register: cm_add_domain

- name: Add L2 domain (normal mode)
  cisco.aci.aci_domain: *domain_present
  register: nm_add_domain

- name: Verify L2 add_domain
  assert:
    that:
    - cm_add_domain is changed
    - nm_add_domain is changed
    - cm_add_domain.sent.l2extDomP.attributes.name == nm_add_domain.sent.l2extDomP.attributes.name == 'l2_dom'
    - cm_add_domain.proposed.l2extDomP.attributes.name == nm_add_domain.proposed.l2extDomP.attributes.name == 'l2_dom'
    - cm_add_domain.current == cm_add_domain.previous == nm_add_domain.previous == []
    - nm_add_domain.current.0.l2extDomP.attributes.annotation == 'orchestrator:ansible'
    - nm_add_domain.current.0.l2extDomP.attributes.name == 'l2_dom'
    - nm_add_domain.current.0.l2extDomP.attributes.dn == 'uni/l2dom-l2_dom'

- name: Add L2 domain again (check_mode)
  cisco.aci.aci_domain: *domain_present
  check_mode: true
  register: cm_add_domain_again

- name: Add L2 domain again (normal mode)
  cisco.aci.aci_domain: *domain_present
  register: nm_add_domain_again

- name: Verify L2 add_domain_again
  assert:
    that:
    - cm_add_domain_again is not changed
    - nm_add_domain_again is not changed

- name: Update L2 domain with incorrect parameter vm_provider (check_mode)
  cisco.aci.aci_domain:
    <<: *domain_present
    vm_provider: vmware
  check_mode: true
  ignore_errors: true
  register: cm_incorrect_vm_provider

- name: Update L2 domain with incorrect parameter vm_provider (normal mode)
  cisco.aci.aci_domain:
    <<: *domain_present
    vm_provider: vmware
  ignore_errors: true
  register: nm_incorrect_vm_provider

- name: Update L2 domain with incorrect parameter encap_mode (check_mode)
  cisco.aci.aci_domain:
    <<: *domain_present
    encap_mode: vlan
  check_mode: true
  ignore_errors: true
  register: cm_incorrect_encap_mode

- name: Update L2 domain with incorrect parameter encap_mode (normal mode)
  cisco.aci.aci_domain:
    <<: *domain_present
    encap_mode: vlan
  ignore_errors: true
  register: nm_incorrect_encap_mode

- name: Update L2 domain with incorrect parameter multicast_address (check_mode)
  cisco.aci.aci_domain:
    <<: *domain_present
    multicast_address: 10.10.10.0
  check_mode: true
  ignore_errors: true
  register: cm_incorrect_multicast_address

- name: Update L2 domain with incorrect parameter multicast_address (normal mode)
  cisco.aci.aci_domain:
    <<: *domain_present
    multicast_address: 10.10.10.0
  ignore_errors: true
  register: nm_incorrect_multicast_address

- name: Update L2 domain with incorrect parameter vswitch (check_mode)
  cisco.aci.aci_domain:
    <<: *domain_present
    vswitch: avs
  check_mode: true
  ignore_errors: true
  register: cm_incorrect_vswitch

- name: Update L2 domain with incorrect parameter vswitch (normal mode)
  cisco.aci.aci_domain:
    <<: *domain_present
    vswitch: avs
  ignore_errors: true
  register: nm_incorrect_vswitch

- name: Verify incorrect parameter
  assert:
    that:
    - cm_incorrect_vm_provider.msg == "Domain type 'l2dom' cannot have parameter 'vm_provider'"
    - nm_incorrect_vm_provider.msg == "Domain type 'l2dom' cannot have parameter 'vm_provider'"
    - cm_incorrect_encap_mode.msg == "Domain type 'l2dom' cannot have parameter 'encap_mode'"
    - nm_incorrect_encap_mode.msg == "Domain type 'l2dom' cannot have parameter 'encap_mode'"
    - cm_incorrect_multicast_address.msg == "Domain type 'l2dom' cannot have parameter 'multicast_address'"
    - nm_incorrect_multicast_address.msg == "Domain type 'l2dom' cannot have parameter 'multicast_address'"
    - cm_incorrect_vswitch.msg == "Domain type 'l2dom' cannot have parameter 'vswitch'"
    - nm_incorrect_vswitch.msg == "Domain type 'l2dom' cannot have parameter 'vswitch'"

# QUERY ALL DOMAINS
- name: Query all L2 domains (check_mode)
  cisco.aci.aci_domain: &domain_query
    host: '{{ aci_hostname }}'
    username: '{{ aci_username }}'
    password: '{{ aci_password }}'
    validate_certs: '{{ aci_validate_certs | default(false) }}'
    use_ssl: '{{ aci_use_ssl | default(true) }}'
    use_proxy: '{{ aci_use_proxy | default(true) }}'
    output_level: '{{ aci_output_level | default("info") }}'
    domain_type: l2dom
    state: query
  check_mode: true
  register: cm_query_all_domains

- name: Query all L2 domains (normal mode)
  cisco.aci.aci_domain: *domain_query
  register: nm_query_all_domains

- name: Verify L2 query_all_domains
  assert:
    that:
    - cm_query_all_domains is not changed
    - nm_query_all_domains is not changed
    - cm_query_all_domains == nm_query_all_domains
    - nm_query_all_domains.current|length >= 1


# QUERY A DOMAIN
- name: Query our L2 domain (check_mode)
  cisco.aci.aci_domain:
    <<: *domain_query
    domain: l2_dom
  check_mode: true
  register: cm_query_domain

- name: Query our L2 domain (normal mode)
  cisco.aci.aci_domain:
    <<: *domain_query
    domain: l2_dom
  register: nm_query_domain

- name: Verify L2 query_domain
  assert:
    that:
    - cm_query_domain is not changed
    - nm_query_domain is not changed
    - cm_query_domain == nm_query_domain
    - nm_query_domain.current.0.l2extDomP.attributes.dn == 'uni/l2dom-l2_dom'
    - nm_query_domain.current.0.l2extDomP.attributes.name == 'l2_dom'


# REMOVE DOMAIN
- name: Remove L2 domain (check_mode)
  cisco.aci.aci_domain: *domain_absent
  check_mode: true
  register: cm_remove_domain

- name: Remove L2 domain (normal mode)
  cisco.aci.aci_domain: *domain_absent
  register: nm_remove_domain

- name: Verify L2 remove_domain
  assert:
    that:
    - cm_remove_domain is changed
    - nm_remove_domain is changed
    - cm_remove_domain.current.0.l2extDomP.attributes.dn == cm_remove_domain.previous.0.l2extDomP.attributes.dn == nm_remove_domain.previous.0.l2extDomP.attributes.dn == 'uni/l2dom-l2_dom'
    - cm_remove_domain.current.0.l2extDomP.attributes.name == cm_remove_domain.previous.0.l2extDomP.attributes.name == nm_remove_domain.previous.0.l2extDomP.attributes.name == 'l2_dom'
    - nm_remove_domain.current == []

- name: Remove L2 domain again (check_mode)
  cisco.aci.aci_domain: *domain_absent
  check_mode: true
  register: cm_remove_domain_again

- name: Remove L2 domain again (normal mode)
  cisco.aci.aci_domain: *domain_absent
  register: nm_remove_domain_again

- name: Verify L2 remove_domain_again
  assert:
    that:
    - cm_remove_domain_again is not changed
    - nm_remove_domain_again is not changed


# QUERY NON-EXISTING DOMAIN
- name: Query non-existing L2 domain (check_mode)
  cisco.aci.aci_domain:
    <<: *domain_query
    domain: l2_dom
  check_mode: true
  register: cm_query_non_domain

- name: Query non-existing L2 domain (normal mode)
  cisco.aci.aci_domain:
    <<: *domain_query
    domain: l2_dom
  register: nm_query_non_domain

- name: Verify L2 query_non_domain
  assert:
    that:
    - cm_query_non_domain is not changed
    - nm_query_non_domain is not changed
    - cm_query_non_domain == nm_query_non_domain
    - nm_query_non_domain.current == []
