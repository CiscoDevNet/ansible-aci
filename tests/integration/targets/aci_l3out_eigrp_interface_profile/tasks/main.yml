# Test code for the ACI modules
# Copyright: (c) 2023, Gaspard Micol (@gmicol) <gmicol@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  ansible.builtin.fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: Set vars
  ansible.builtin.set_fact:
    aci_info: &aci_info
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: debug

# CLEAN ENVIRONMENT
- name: Remove test tenant before we kickoff
  cisco.aci.aci_tenant: &aci_tenant_absent
    <<: *aci_info
    tenant: ansible_tenant
    state: absent

- name: Verify Cloud and Non-Cloud Sites in use.
  ansible.builtin.include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Execute tasks only for non-cloud sites
  when: query_cloud.current == []  # This condition will execute only non-cloud sites
  block:  # block specifies execution of tasks within, based on conditions
  # SETUP ENVIRONMENT
  - name: Create domain
    cisco.aci.aci_domain: &aci_domain_present
      <<: *aci_info
      domain: ansible_dom
      domain_type: l3dom
      state: present

  - name: Create tenant
    cisco.aci.aci_tenant: &aci_tenant_present
      <<: *aci_tenant_absent
      state: present

  - name: Configure VRF
    cisco.aci.aci_vrf: &aci_vrf_present
      <<: *aci_tenant_present
      vrf: ansible_vrf

  - name: Create L3Out
    cisco.aci.aci_l3out: &aci_l3out_present
      <<: *aci_vrf_present
      l3out: ansible_l3out
      domain: ansible_dom
      route_control: export
      l3protocol: eigrp
      asn: 1

  - name: Create L3Out logical node profile
    cisco.aci.aci_l3out_logical_node_profile: &aci_l3out_node_profile_present
      <<: *aci_tenant_present
      l3out: ansible_l3out
      node_profile: ansible_l3out_node_profile

  - name: Create L3Out logical interface profile
    cisco.aci.aci_l3out_logical_interface_profile: &aci_l3out_interface_profile_present
      <<: *aci_l3out_node_profile_present
      interface_profile: ansible_l3out_interface_profile

  - name: Add eigrp policy to interface profile (check mode)
    cisco.aci.aci_l3out_eigrp_interface_profile: &aci_l3out_eigrp_interface_profile_present
      <<: *aci_l3out_interface_profile_present
      eigrp_policy: ansible_eigrp_interface_policy
    check_mode: true
    register: cm_add_eigrpIfP

  - name: Add ospf policy to interface profile (normal mode)
    cisco.aci.aci_l3out_eigrp_interface_profile:
      <<: *aci_l3out_eigrp_interface_profile_present
    register: nm_add_eigrpIfP

  - name: Verify add_eigrpIfP
    ansible.builtin.assert:
      that:
      - cm_add_eigrpIfP is changed
      - nm_add_eigrpIfP is changed
      - cm_add_eigrpIfP.previous == nm_add_eigrpIfP.previous == []
      - cm_add_eigrpIfP.proposed.eigrpIfP.children[0].ospfRsIfPol.attributes.tneigrpIfPolName == 'default'
      - nm_add_eigrpIfP.current[0].eigrpIfP.children[0].ospfRsIfPol.attributes.tneigrpIfPolName == 'default'

  - name: Add ospf policy again to check idempotency
    cisco.aci.aci_l3out_eigrp_interface_profile: *eigrpIfP_present
    register: nm_add_eigrpIfP_again

  - name: Verify add_eigrpIfP_again
    ansible.builtin.assert:
      that:
      - nm_add_eigrpIfP_again is not changed

  # UPDATE INTERFACE PROFILE OSPF POLICY
  - name: Update interface profile ospf policy
    cisco.aci.aci_l3out_eigrp_interface_profile: &eigrpIfP_update
      <<: *eigrpIfP_present
      ospf_auth_type: simple
      ospf_auth_key: my_key
    register: update_eigrpIfP

  - name: Verify update_eigrpIfP
    ansible.builtin.assert:
      that:
      - update_eigrpIfP is changed
      - update_eigrpIfP.previous != []
      - update_eigrpIfP.current[0].eigrpIfP.children[0].ospfRsIfPol.attributes.tneigrpIfPolName == 'default'
      - update_eigrpIfP.current[0].eigrpIfP.attributes.authType == 'simple'

  # QUERY INTERFACE PROFILE OSPF POLICY
  - name: Query interface profile ospf policy
    cisco.aci.aci_l3out_eigrp_interface_profile:
      <<: *eigrpIfP_update
      state: query
    register: query_eigrpIfP_profile

  - name: Verify query_eigrpIfP_profile
    ansible.builtin.assert:
      that:
      - query_eigrpIfP_profile is not changed
      - query_eigrpIfP_profile.current|length == 1
      - query_eigrpIfP_profile.current[0].eigrpIfP.children[0].ospfRsIfPol.attributes.tneigrpIfPolName == 'default'
      - query_eigrpIfP_profile.current[0].eigrpIfP.attributes.authType == 'simple'

  # REMOVE POLICY
  - name: Remove interface profile ospf policy
    cisco.aci.aci_l3out_eigrp_interface_profile: &eigrpIfP_absent
      <<: *intf_present
      state: absent
    register: remove_profile

  - name: Remove interface profile ospf policy again for idempotency
    cisco.aci.aci_l3out_eigrp_interface_profile:
      <<: *eigrpIfP_absent
      state: absent
    register: remove_profile_again

  - name: Verify remove_profile and remove_profile_again
    ansible.builtin.assert:
      that:
      - remove_profile.previous|length == 1
      - remove_profile.previous[0].eigrpIfP.children[0].ospfRsIfPol.attributes.tneigrpIfPolName == 'default'
      - remove_profile.previous[0].eigrpIfP.attributes.authType == 'simple'
      - remove_profile is changed
      - remove_profile_again is not changed
      - remove_profile.current == remove_profile_again.current == []

  # QUERY NON-EXISTING POLICY
  - name: Query a nonexisting policy
    cisco.aci.aci_l3out_eigrp_interface_profile:
      <<: *eigrpIfP_absent
      state: query
    register: query_nonexist_policy

  - name: Verify query_nonexist_policy
    ansible.builtin.assert:
      that:
      - query_nonexist_policy is not changed
      - query_nonexist_policy.current == []

  # REMOVE NON-EXISTING POLICY
  - name: Remove interface profile ospf policy again (nonexisting)
    cisco.aci.aci_l3out_eigrp_interface_profile:
      <<: *eigrpIfP_absent
    register: remove_nonexist_policy

  - name: Verify remove_nonexist_policy
    ansible.builtin.assert:
      that:
      - remove_nonexist_policy is not changed
      - remove_nonexist_policy.current == []
