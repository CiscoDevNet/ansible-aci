# Test code for the ACI modules
# Copyright: (c) 2020, Shreyas Srish (@shrsr)

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: Set vars
  set_fact:
    aci_info: &aci_info
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: debug

- name: Verify Cloud and Non-Cloud Sites in use.
  include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

# Clean Environment
- name: Remove domains
  aci_domain:
    <<: *aci_info 
    domain: '{{ item.name }}'
    domain_type: '{{ item.type }}'
    state: absent
  loop:
    - { name: phys_dom, type: phys }
    - { name: fc_dom, type: fc }
    - { name: l2_dom, type: l2dom }
    - { name: l3_dom, type: l3dom }

- name: Remove domains
  aci_domain:
    <<: *aci_info 
    domain: vmm_dom
    domain_type: vmm
    vm_provider: '{{ item.name }}'
    state: absent
  loop:
    - { name: vmware }
    - { name: microsoft }
    - { name: cloudfoundry }
    - { name: openshift }
    - { name: openstack }
    - { name: redhat }
    - { name: kubernetes }

- name: Execute tasks only for non-cloud sites
  when: query_cloud.current == []  # This condition will execute only non-cloud sites
  block:  # block specifies execution of tasks within, based on conditions
  # Add
  - name: Add physical domain
    aci_domain:
      <<: *aci_info 
      domain: phys_dom
      domain_type: phys
      state: present
    register: phys_domain

  - name: Add l2 domain
    aci_domain:
      <<: *aci_info 
      domain: l2_dom
      domain_type: l2dom
      state: present
    register: l2_domain

  - name: Add l3 domain
    aci_domain:
      <<: *aci_info 
      domain: l3_dom
      domain_type: l3dom
      state: present
    register: l3_domain

  - name: Add FC domain
    aci_domain:
      <<: *aci_info 
      domain: fc_dom
      domain_type: fc
      state: present
    register: fc_domain

  - name: Add vmm domain
    aci_domain:
      <<: *aci_info 
      domain: vmm_dom
      domain_type: vmm
      vm_provider: vmware
      state: present
    register: vmm_domain

  - name: Add domain to encap pool binding (phys, pool_type=vlan)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: phys_dom
      domain_type: phys
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      state: present
    register: phys_vlan

  - name: Add domain to encap pool binding (fc, pool_type=vsan)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: fc_dom
      domain_type: fc
      pool: test_pool
      pool_type: vsan
      pool_allocation_mode: dynamic
      state: present
    register: fc_vsan

  - name: Add domain to encap pool binding (domain_type=l2dom)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: l2_dom
      domain_type: l2dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: static
      state: present
    register: l2dom

  - name: Add domain to encap pool binding (domain_type=l3dom)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: l3_dom
      domain_type: l3dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: static
      state: present
    register: l3dom

  - name: Add domain to encap pool binding (domain_type=vmm, vm_provider=cloudfoundry)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: vmm_dom
      domain_type: vmm
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: cloudfoundry
      state: present
    register: vmm_cloudfoundry

  - name: Add domain to encap pool binding (domain_type=vmm, vm_provider=kubernetes)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: vmm_dom
      domain_type: vmm
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: kubernetes
      state: present
    register: vmm_kubernetes

  - name: Add domain to encap pool binding (domain_type=vmm, vm_provider=microsoft)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: vmm_dom
      domain_type: vmm
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: microsoft
      state: present
    register: vmm_microsoft

  - name: Add domain to encap pool binding (domain_type=vmm, vm_provider=openshift)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: vmm_dom
      domain_type: vmm
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: openshift
      state: present
    register: vmm_openshift

  - name: Add domain to encap pool binding (domain_type=vmm, vm_provider=openstack)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: vmm_dom
      domain_type: vmm
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: openstack
      state: present
    register: vmm_openstack

  - name: Add domain to encap pool binding (domain_type=vmm, vm_provider=redhat)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: vmm_dom
      domain_type: vmm
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: redhat
      state: present
    register: vmm_redhat

  - name: Add domain to encap pool binding (domain_type=vmm, vm_provider=vmware)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: vmm_dom
      domain_type: vmm
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: vmware
      state: present
    register: vmm_vmware

  - name: Add domain to encap pool binding (domain_type=vmm, vm_provider=vmware) again
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: vmm_dom
      domain_type: vmm
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: vmware
      state: present
    register: vmm_vmware_idemp

  - name: Add domain to encap pool binding (phys with vm_provider)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: phys_dom
      domain_type: phys
      pool: test_pool
      pool_type: vlan
      vm_provider: vmware
      pool_allocation_mode: dynamic
      state: present
    ignore_errors: true
    register: phys_vlan_with_vmm

  - name: Add domain to encap pool binding (phys, pool_type=vlan, no allocation mode)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: phys_dom
      domain_type: phys
      pool: test_pool
      pool_type: vlan
      state: present
    ignore_errors: true
    register: phys_vlan_no_alloc

  - name: Add domain to encap pool binding (domain_type=vmm, vm_provider=vmware, pool_type=vxlan)
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: vmm_dom
      domain_type: vmm
      pool: test_pool
      pool_type: vxlan
      pool_allocation_mode: dynamic
      vm_provider: vmware
      state: present
    ignore_errors: true
    register: vmm_vmware_vxlan

  - name: Add domain to encap pool binding (phys, pool_type=vlan) missing domain_type
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: phys_dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      state: present
    ignore_errors: true
    register: phys_missing_domain_type

  - name: Add domain to encap pool binding (phys, pool_type=vlan) missing pool_type
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: phys_dom
      domain_type: phys
      pool: test_pool
      pool_allocation_mode: dynamic
      state: present
    ignore_errors: true
    register: phys_missing_pool_type

  - name: Verify add operation for All Sites
    assert:
      that:
      - phys_vlan is changed
      - fc_vsan is changed
      - l2dom is changed
      - l3dom is changed
      - vmm_kubernetes is changed
      - phys_vlan.current.0.physDomP.attributes.annotation == 'orchestrator:ansible'
      - phys_vlan.current.0.physDomP.children.0.infraRsVlanNs.attributes.tDn =='uni/infra/vlanns-[test_pool]-dynamic'
      - fc_vsan.current.0.fcDomP.children.0.fcRsVsanNs.attributes.tDn == 'uni/infra/vsanns-[test_pool]-dynamic'
      - l2dom.current.0.l2extDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-static'
      - l3dom.current.0.l3extDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-static'
      - vmm_kubernetes.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - phys_vlan_with_vmm.msg is match("Domain type '[0-9a-zA-Z]*' cannot have a 'vm_provider'")
      - vmm_vmware_vxlan.msg is match("vxlan pools do not support setting the allocation_mode; please remove this parameter from the task")
      - phys_vlan_no_alloc.msg is match("ACI requires the 'pool_allocation_mode' for 'pool_type' of 'vlan' and 'vsan' when 'pool' is provided")
      - phys_missing_pool_type.msg is match("missing required arguments{{':'}} pool_type")
      - phys_missing_domain_type.msg is match("missing required arguments{{':'}} domain_type")

  - name: Verify add operation for Non-Cloud Sites
    assert:
      that:
      - vmm_cloudfoundry is changed
      - vmm_openshift is changed
      - vmm_openstack is changed
      - vmm_redhat is changed
      - vmm_vmware is changed
      - vmm_vmware_idemp is not changed
      - vmm_cloudfoundry.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - vmm_microsoft.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - vmm_openshift.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - vmm_openstack.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - vmm_redhat.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - vmm_vmware.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'

  # QUERY
  - name: Query all
    aci_domain_to_encap_pool:
      <<: *aci_info
      domain_type: phys
      pool_type: vlan
      state: query
    register: query_all

  - name: Query phys
    aci_domain_to_encap_pool:
      <<: *aci_info
      domain: phys_dom
      domain_type: phys
      pool_type: vlan
      state: query
    register: query_phys

  - name: Query fc
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: fc_dom
      domain_type: fc
      pool_type: vsan
      state: query
    register: query_fc

  - name: Query l2dom
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain: l2_dom
      domain_type: l2dom
      pool_type: vlan
      state: query
    register: query_l2dom

  - name: Query l3dom
    aci_domain_to_encap_pool:
      <<: *aci_info
      domain: l3_dom 
      domain_type: l3dom
      pool_type: vlan
      state: query
    register: query_l3dom

  - name: Query vmm
    aci_domain_to_encap_pool:
      <<: *aci_info
      domain: vmm_dom
      domain_type: vmm
      pool_type: vlan
      vm_provider: microsoft
      state: query
    register: query_vmm_microsoft

  - name: Query vmm
    aci_domain_to_encap_pool:
      <<: *aci_info
      domain: vmm_dom
      domain_type: vmm
      pool_type: vlan
      vm_provider: cloudfoundry
      state: query
    register: query_vmm_cloudfoundry

  - name: Query vmm
    aci_domain_to_encap_pool:
      <<: *aci_info
      domain: vmm_dom
      domain_type: vmm
      pool_type: vlan
      vm_provider: kubernetes
      state: query
    register: query_vmm_kubernetes

  - name: Query vmm
    aci_domain_to_encap_pool:
      <<: *aci_info
      domain: vmm_dom
      domain_type: vmm
      pool_type: vlan
      vm_provider: openshift
      state: query
    register: query_vmm_openshift

  - name: Query vmm
    aci_domain_to_encap_pool:
      <<: *aci_info
      domain: vmm_dom
      domain_type: vmm
      pool_type: vlan
      vm_provider: openstack
      state: query
    register: query_vmm_openstack

  - name: Query vmm
    aci_domain_to_encap_pool:
      <<: *aci_info
      domain: vmm_dom
      domain_type: vmm
      pool_type: vlan
      vm_provider: redhat
      state: query
    register: query_vmm_redhat

  - name: Query vmm
    aci_domain_to_encap_pool:
      <<: *aci_info
      domain: vmm_dom
      domain_type: vmm
      pool_type: vlan
      vm_provider: vmware
      state: query
    register: query_vmm_vmware

  - name: Query vmm
    aci_domain_to_encap_pool:
      <<: *aci_info
      domain: vmm_dom
      domain_type: vmm
      pool_type: vlan
      vm_provider: vmware
      state: query
    register: query_vmm_vmware

  - name: Verify Query for Non-Cloud sites
    assert:
      that:
      - query_all | length >=1
      - query_phys.current.0.physDomP.children.0.infraRsVlanNs.attributes.tDn =='uni/infra/vlanns-[test_pool]-dynamic'
      - query_fc.current.0.fcDomP.children.0.fcRsVsanNs.attributes.tDn == 'uni/infra/vsanns-[test_pool]-dynamic'
      - query_l2dom.current.0.l2extDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-static'
      - query_l3dom.current.0.l3extDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-static'
      - query_vmm_kubernetes.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'


  - name: Verify Query for Cloud sites
    assert:
      that:
      - query_vmm_cloudfoundry.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - query_vmm_microsoft.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - query_vmm_openshift.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - query_vmm_openstack.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - query_vmm_redhat.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - query_vmm_vmware.current.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'

  # REMOVE
  - name: Remove phys
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain_type: phys
      domain: phys_dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      state: absent
    register: remove_phys

  - name: Remove fc
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain_type: fc
      domain: fc_dom
      pool: test_pool
      pool_type: vsan
      pool_allocation_mode: dynamic
      state: absent
    register: remove_fc

  - name: Remove l2dom
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain_type: l2dom
      domain: l2_dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: static
      state: absent
    register: remove_l2dom

  - name: Remove l3dom
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain_type: l3dom
      domain: l3_dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: static
      state: absent
    register: remove_l3dom

  - name: Remove vmm cloudfoundry
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain_type: vmm
      domain: vmm_dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: cloudfoundry
      state: absent
    register: remove_vmm_cloudfoundry

  - name: Remove vmm redhat kubernetes
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain_type: vmm
      domain: vmm_dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: kubernetes
      state: absent
    register: remove_vmm_kubernetes

  - name: Remove vmm microsoft
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain_type: vmm
      domain: vmm_dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: microsoft
      state: absent
    register: remove_vmm_microsoft

  - name: Remove vmm redhat
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain_type: vmm
      domain: vmm_dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: redhat
      state: absent
    register: remove_vmm_redhat

  - name: Remove vmm openstack
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain_type: vmm
      domain: vmm_dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: openstack
      state: absent
    register: remove_vmm_openstack

  - name: Remove vmm openshift
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain_type: vmm
      domain: vmm_dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: openshift
      state: absent
    register: remove_vmm_openshift

  - name: Remove vmm vmware
    aci_domain_to_encap_pool:
      <<: *aci_info 
      domain_type: vmm
      domain: vmm_dom
      pool: test_pool
      pool_type: vlan
      pool_allocation_mode: dynamic
      vm_provider: vmware
      state: absent
    register: remove_vmm_vmware

  - name: Verify Remove for All Sites
    assert:
      that:
      - remove_phys.previous.0.physDomP.children.0.infraRsVlanNs.attributes.tDn =='uni/infra/vlanns-[test_pool]-dynamic'
      - remove_fc.previous.0.fcDomP.children.0.fcRsVsanNs.attributes.tDn == 'uni/infra/vsanns-[test_pool]-dynamic'
      - remove_l2dom.previous.0.l2extDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-static'
      - remove_l3dom.previous.0.l3extDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-static'
      - remove_vmm_kubernetes.previous.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'

  - name: Verify Remove for Non-Cloud Sites
    assert:
      that:
      - remove_vmm_cloudfoundry.previous.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - remove_vmm_microsoft.previous.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - remove_vmm_openshift.previous.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - remove_vmm_openstack.previous.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - remove_vmm_redhat.previous.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'
      - remove_vmm_vmware.previous.0.vmmDomP.children.0.infraRsVlanNs.attributes.tDn == 'uni/infra/vlanns-[test_pool]-dynamic'

  # Clean Environment Again
  - name: Remove domains
    aci_domain:
      <<: *aci_info 
      domain: '{{ item.name }}'
      domain_type: '{{ item.type }}'
      state: absent
    loop:
      - { name: phys_dom, type: phys }
      - { name: fc_dom, type: fc }
      - { name: l2_dom, type: l2dom }
      - { name: l3_dom, type: l3dom }

  - name: Remove domains
    aci_domain:
      <<: *aci_info 
      domain: vmm_dom
      domain_type: vmm
      vm_provider: '{{ item.name }}'
      state: absent
    loop:
      - { name: vmware }
      - { name: microsoft }
      - { name: cloudfoundry }
      - { name: openshift }
      - { name: openstack }
      - { name: redhat }
      - { name: kubernetes }