# Author: Jason Juenger (@jasonjuenger)
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

# SET VARS
- name: Set vars
  set_fact:
    aci_info: &aci_info
      host: '{{ aci_hostname }}'
      username: '{{ aci_username }}'
      password: '{{ aci_password }}'
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: '{{ aci_output_level | default("info") }}'

# CLEAN ENVIRONMENT
- name: Remove test tenant before we kickoff
  cisco.aci.aci_tenant: &tenant_absent
    <<: *aci_info
    tenant: ansible_test
    state: absent

- name: Verify Cloud and Non-Cloud Sites in use.
  include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Execute tasks only for non-cloud sites
  when: query_cloud.current == []  # This condition will execute only non-cloud sites
  block:  # block specifies execution of tasks within, based on conditions
  # SETUP ENVIRONMENT
  - name: Create domain
    cisco.aci.aci_domain: &domain_present
      <<: *aci_info
      domain: l3outintftest
      domain_type: l3dom
      state: present

  - name: Create tenant
    cisco.aci.aci_tenant: &tenant_present
      <<: *tenant_absent
      state: present

  - name: Configure VRF
    cisco.aci.aci_vrf: &vrf_present
      <<: *tenant_present
      vrf: l3outintftest

  - name: Create L3Out
    cisco.aci.aci_l3out:
      <<: *vrf_present
      l3out: l3outintftest
      domain: l3outintftest
      route_control: export

  - name: Create node profile
    cisco.aci.aci_l3out_logical_node_profile: &np_present
      <<: *tenant_present
      l3out: l3outintftest
      node_profile: NODES

  - name: Create interface profile
    cisco.aci.aci_l3out_logical_interface_profile: &intf_present
      <<: *np_present
      interface_profile: INTFS

  # BEGIN WITH TESTS (ADD OSPF POLICY TO PROFILE)
  - name: Add ospf policy to interface profile (check mode)
    cisco.aci.aci_l3out_logical_interface_profile_ospf_policy: &ospfIfP_present
      <<: *intf_present
      ospf_policy: default
    check_mode: true
    register: cm_add_ospfIfP

  - name: Add ospf policy to interface profile (normal mode)
    cisco.aci.aci_l3out_logical_interface_profile_ospf_policy: *ospfIfP_present
    register: nm_add_ospfIfP

  - name: Verify add_ospfIfP
    assert:
      that:
      - cm_add_ospfIfP is changed
      - nm_add_ospfIfP is changed
      - cm_add_ospfIfP.previous == nm_add_ospfIfP.previous == []
      - cm_add_ospfIfP.proposed.ospfIfP.children[0].ospfRsIfPol.attributes.tnOspfIfPolName == 'default'
      - nm_add_ospfIfP.current[0].ospfIfP.children[0].ospfRsIfPol.attributes.tnOspfIfPolName == 'default'

  - name: Add ospf policy again to check idempotency
    cisco.aci.aci_l3out_logical_interface_profile_ospf_policy: *ospfIfP_present
    register: nm_add_ospfIfP_again

  - name: Verify add_ospfIfP_again
    assert:
      that:
      - nm_add_ospfIfP_again is not changed

  # UPDATE INTERFACE PROFILE OSPF POLICY
  - name: Update interface profile ospf policy
    cisco.aci.aci_l3out_logical_interface_profile_ospf_policy: &ospfIfP_update
      <<: *ospfIfP_present
      ospf_auth_type: simple
      ospf_auth_key: my_key
    register: update_ospfIfP

  - name: Verify update_ospfIfP
    assert:
      that:
      - update_ospfIfP is changed
      - update_ospfIfP.previous != []
      - update_ospfIfP.current[0].ospfIfP.children[0].ospfRsIfPol.attributes.tnOspfIfPolName == 'default'
      - update_ospfIfP.current[0].ospfIfP.attributes.authType == 'simple'

  # QUERY INTERFACE PROFILE OSPF POLICY
  - name: Query interface profile ospf policy
    cisco.aci.aci_l3out_logical_interface_profile_ospf_policy:
      <<: *ospfIfP_update
      state: query
    register: query_ospfIfP_profile

  - name: Verify query_ospfIfP_profile
    assert:
      that:
      - query_ospfIfP_profile is not changed
      - query_ospfIfP_profile.current|length == 1
      - query_ospfIfP_profile.current[0].ospfIfP.children[0].ospfRsIfPol.attributes.tnOspfIfPolName == 'default'
      - query_ospfIfP_profile.current[0].ospfIfP.attributes.authType == 'simple'

  # REMOVE POLICY
  - name: Remove interface profile ospf policy
    cisco.aci.aci_l3out_logical_interface_profile_ospf_policy: &ospfIfP_absent
      <<: *intf_present
      state: absent
    register: remove_profile

  - name: Remove interface profile ospf policy again for idempotency
    cisco.aci.aci_l3out_logical_interface_profile_ospf_policy:
      <<: *ospfIfP_absent
      state: absent
    register: remove_profile_again

  - name: Verify remove_profile and remove_profile_again
    assert:
      that:
      - remove_profile.previous|length == 1
      - remove_profile.previous[0].ospfIfP.children[0].ospfRsIfPol.attributes.tnOspfIfPolName == 'default'
      - remove_profile.previous[0].ospfIfP.attributes.authType == 'simple'
      - remove_profile is changed
      - remove_profile_again is not changed
      - remove_profile.current == remove_profile_again.current == []

  # QUERY NON-EXISTING POLICY
  - name: Query a nonexisting policy
    cisco.aci.aci_l3out_logical_interface_profile_ospf_policy:
      <<: *ospfIfP_absent
      state: query
    register: query_nonexist_policy

  - name: Verify query_nonexist_policy
    assert:
      that:
      - query_nonexist_policy is not changed
      - query_nonexist_policy.current == []

  # REMOVE NON-EXISTING POLICY
  - name: Remove interface profile ospf policy again (nonexisting)
    cisco.aci.aci_l3out_logical_interface_profile_ospf_policy:
      <<: *ospfIfP_absent
    register: remove_nonexist_policy

  - name: Verify remove_nonexist_policy
    assert:
      that:
      - remove_nonexist_policy is not changed
      - remove_nonexist_policy.current == []
