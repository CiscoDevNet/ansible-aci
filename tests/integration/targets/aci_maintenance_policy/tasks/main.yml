# Test code for the ACI modules
# Copyright: (c) 2023, Gaspard Micol (@gmicol) <gmicol@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  fail:
    msg: 'Please define the following variables: aci_hostname, aci_username and aci_password.'
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

- name: Set vars
  set_fact:
    aci_info: &aci_info
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: '{{ aci_validate_certs | default(false) }}'
      use_ssl: '{{ aci_use_ssl | default(true) }}'
      use_proxy: '{{ aci_use_proxy | default(true) }}'
      output_level: debug

- name: Verify Cloud and Non-Cloud Sites in use.
  include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Execute tasks only for non-cloud sites
  when: query_cloud.current == []  # This condition will execute only non-cloud sites
  block:  # block specifies execution of tasks within, based on conditions
  # Clean Environment
  - name: Create Scheduler
    aci_fabric_scheduler: &aci_fabric_scheduler_present
      <<: *aci_info
      name: anstest_scheduler
      state: present

  - name: Ensure first maintenance policy does not exist
    aci_maintenance_policy: &aci_maintenance_policy_absent
      <<: *aci_info
      name: anstest_policy
      description: test for maintenance policy
      run_mode: pause_never
      graceful: True
      scheduler: anstest_scheduler
      ignore_compat: true
      admin_state: untriggered
      download_state: untriggered
      notify_condition: notify_always_between_sets
      smu_operation: smu_install
      smu_operation_flags: smu_reload_skip
      state: absent

  - name: Ensure second maintenance policy does not exist
    aci_maintenance_policy: &aci_maintenance_policy_2_absent
      <<: *aci_info
      name: anstest_policy_2
      scheduler: anstest_scheduler
      state: absent

  - name: Create first maintenance policy (check_mode)
    aci_maintenance_policy: &aci_maintenance_policy_present
      <<: *aci_maintenance_policy_absent
      state: present
    check_mode: true
    register: cm_add_maintenance_policy_1

  - name: Create first maintenance policy (normal_mode)
    aci_maintenance_policy:
      <<: *aci_maintenance_policy_present
    register: nm_add_maintenance_policy_1

  - name: Create first maintenance policy again - testing idempotency
    aci_maintenance_policy:
      <<: *aci_maintenance_policy_present
    register: idempotency_add_maintenance_policy_1

  - name: Create second maintenance policy
    aci_maintenance_policy: &aci_maintenance_policy_2_present
      <<: *aci_maintenance_policy_2_absent
      state: present
    register: nm_add_maintenance_policy_2

  - name: Asserts for creation tasks
    assert:
      that:
        - cm_add_maintenance_policy_1 is changed
        - cm_add_maintenance_policy_1.previous == []
        - cm_add_maintenance_policy_1.current == []
        - nm_add_maintenance_policy_1 is changed
        - nm_add_maintenance_policy_1.current.0.maintMaintP.attributes.adminSt == "untriggered"
        - nm_add_maintenance_policy_1.current.0.maintMaintP.attributes.downloadSt == "untriggered"
        - nm_add_maintenance_policy_1.current.0.maintMaintP.attributes.notifCond == "notifyAlwaysBetweenSets"
        - nm_add_maintenance_policy_1.current.0.maintMaintP.attributes.smuOperation == "smuInstall"
        - nm_add_maintenance_policy_1.current.0.maintMaintP.attributes.smuOperationFlags == "smuReloadSkip"
        - nm_add_maintenance_policy_1.current.0.maintMaintP.attributes.graceful == "yes"
        - nm_add_maintenance_policy_1.current.0.maintMaintP.attributes.ignoreCompat == "yes"
        - nm_add_maintenance_policy_1.current.0.maintMaintP.attributes.name == "anstest_policy"
        - nm_add_maintenance_policy_1.current.0.maintMaintP.attributes.runMode == "pauseNever"
        - nm_add_maintenance_policy_1.current.0.maintMaintP.children.0.maintRsPolScheduler.attributes.tnTrigSchedPName == "anstest_scheduler"
        - idempotency_add_maintenance_policy_1 is not changed
        - nm_add_maintenance_policy_2 is changed
        - nm_add_maintenance_policy_2.current.0.maintMaintP.attributes.adminSt == "untriggered"
        - nm_add_maintenance_policy_2.current.0.maintMaintP.attributes.graceful == "no"
        - nm_add_maintenance_policy_2.current.0.maintMaintP.attributes.ignoreCompat == "no"
        - nm_add_maintenance_policy_2.current.0.maintMaintP.attributes.downloadSt == "untriggered"
        - nm_add_maintenance_policy_2.current.0.maintMaintP.attributes.notifCond == "notifyOnlyOnFailures"
        - nm_add_maintenance_policy_2.current.0.maintMaintP.attributes.smuOperation == "smuInstall"
        - nm_add_maintenance_policy_2.current.0.maintMaintP.attributes.smuOperationFlags == "smuReloadImmediate"
        - nm_add_maintenance_policy_2.current.0.maintMaintP.attributes.name == "anstest_policy_2"
        - nm_add_maintenance_policy_2.current.0.maintMaintP.attributes.runMode == "pauseOnlyOnFailures"
        - nm_add_maintenance_policy_2.current.0.maintMaintP.children.0.maintRsPolScheduler.attributes.tnTrigSchedPName == "anstest_scheduler"

  - name: Query all maintenance policies
    aci_maintenance_policy:
      <<: *aci_info
      state: query
    register: query_all_maintenance_policy

  - name: Query first maintenance policy
    aci_maintenance_policy:
      <<: *aci_maintenance_policy_present
      state: query
    register: query_first_maintenance_policy

  - name: Asserts for query tasks
    assert:
      that:
        - query_all_maintenance_policy is not changed
        - query_all_maintenance_policy.current | length >= 2
        - '"maintRsPolScheduler" in query_all_maintenance_policy.filter_string'
        - '"class/maintMaintP.json" in query_all_maintenance_policy.url'
        - query_first_maintenance_policy is not changed
        - query_first_maintenance_policy.current.0.maintMaintP.attributes.adminSt == "untriggered"
        - query_first_maintenance_policy.current.0.maintMaintP.attributes.downloadSt == "untriggered"
        - query_first_maintenance_policy.current.0.maintMaintP.attributes.notifCond == "notifyAlwaysBetweenSets"
        - query_first_maintenance_policy.current.0.maintMaintP.attributes.smuOperation == "smuInstall"
        - query_first_maintenance_policy.current.0.maintMaintP.attributes.smuOperationFlags == "smuReloadSkip"
        - query_first_maintenance_policy.current.0.maintMaintP.attributes.graceful == "yes"
        - query_first_maintenance_policy.current.0.maintMaintP.attributes.ignoreCompat == "yes"
        - query_first_maintenance_policy.current.0.maintMaintP.attributes.name == "anstest_policy"
        - query_first_maintenance_policy.current.0.maintMaintP.attributes.runMode == "pauseNever"
        - query_first_maintenance_policy.current.0.maintMaintP.children.0.maintRsPolScheduler.attributes.tnTrigSchedPName == "anstest_scheduler"

  - name: Delete first maintenance policy (check_mode)
    aci_maintenance_policy:
      <<: *aci_maintenance_policy_present
      state: absent
    check_mode: true
    register: cm_delete_maintenance_policy_1

  - name: Delete first maintenance policy (normal_mode)
    aci_maintenance_policy:
      <<: *aci_maintenance_policy_present
      state: absent
    register: nm_delete_maintenance_policy_1

  - name: Delete first maintenance policy again - testing idempotency
    aci_maintenance_policy:
      <<: *aci_maintenance_policy_present
      state: absent
    register: idempotency_delete_maintenance_policy_1

  - name: Delete second maintenance policy (normal_mode)
    aci_maintenance_policy:
      <<: *aci_maintenance_policy_2_present
      state: absent
    register: nm_delete_maintenance_policy_2

  - name: Asserts for deletion tasks
    assert:
      that:
        - cm_delete_maintenance_policy_1 is changed
        - cm_delete_maintenance_policy_1.proposed == {}
        - nm_delete_maintenance_policy_1 is changed
        - nm_delete_maintenance_policy_1.previous != []
        - nm_delete_maintenance_policy_1.current == []
        - idempotency_delete_maintenance_policy_1 is not changed
        - idempotency_delete_maintenance_policy_1.previous == []
        - nm_delete_maintenance_policy_2 is changed
        - nm_delete_maintenance_policy_2.previous != []
        - nm_delete_maintenance_policy_2.current == []
  
  - name: Delete scheduler - clean up the environment
    aci_fabric_scheduler:
      <<: *aci_fabric_scheduler_present
      state: absent
