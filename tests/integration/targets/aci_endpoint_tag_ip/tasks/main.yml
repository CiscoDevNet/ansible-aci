# Test code for the ACI modules
# Copyright: (c) 2025, Sabari Jaganathan (@sajagana)

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI APIC host, ACI username and ACI password
  ansible.builtin.fail:
    msg: "Please define the following variables: aci_hostname, aci_username and aci_password."
  when: aci_hostname is not defined or aci_username is not defined or aci_password is not defined

# SET VARS
- name: Set vars
  ansible.builtin.set_fact:
    aci_info: &aci_info
      host: "{{ aci_hostname }}"
      username: "{{ aci_username }}"
      password: "{{ aci_password }}"
      validate_certs: "{{ aci_validate_certs | default(false) }}"
      use_ssl: "{{ aci_use_ssl | default(true) }}"
      use_proxy: "{{ aci_use_proxy | default(true) }}"
      output_level: '{{ aci_output_level | default("info") }}'

- name: Query system information
  cisco.aci.aci_system:
    <<: *aci_info
    id: 1
    state: query
  register: version

- name: Verify Cloud and Non-Cloud Sites in use.
  ansible.builtin.include_tasks: ../../../../../../integration/targets/aci_cloud_provider/tasks/main.yml

- name: Execute tasks only for ACI v5.2+ and non-cloud sites
  when:
    - version.current.0.topSystem.attributes.version is version('5.2', '>=')
    - query_cloud.current == [] # This condition will execute only non-cloud sites
  block: # block specifies execution of tasks within, based on conditions
    # CLEAN TEST ENVIRONMENT
    - name: Ensure ansible_test tenant not exists
      cisco.aci.aci_tenant:
        <<: *aci_info
        tenant: ansible_test
        state: absent

    - name: Ensure ansible_test tenant exists
      cisco.aci.aci_tenant:
        <<: *aci_info
        tenant: ansible_test
        state: present

    - name: Ensure ansible_test_vrf VRF exists
      cisco.aci.aci_vrf:
        <<: *aci_info
        tenant: ansible_test
        vrf: ansible_test_vrf
        state: present

    # CREATE
    - name: Add IP Tag Object - 1 (check_mode)
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "1.1.1.1"
        vrf: ansible_test_vrf
        name_alias: TestIPTag
        state: present
        output_level: debug
      check_mode: true
      register: cm_add_ip_tag_1

    - name: Add IP Tag Object - 1
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "1.1.1.1"
        vrf: ansible_test_vrf
        name_alias: TestIPTag
        state: present
      register: nm_add_ip_tag_1

    - name: Add IP Tag Object - 1 again
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "1.1.1.1"
        vrf: ansible_test_vrf
        name_alias: TestIPTag
        state: present
      register: nm_add_ip_tag_1_again

    - name: Assertion check for add IP Tag Object
      ansible.builtin.assert:
        that:
          - cm_add_ip_tag_1 is changed
          - cm_add_ip_tag_1.current == []
          - cm_add_ip_tag_1.previous == []
          - cm_add_ip_tag_1.proposed.fvEpIpTag.attributes.annotation == "orchestrator:ansible"
          - cm_add_ip_tag_1.proposed.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - cm_add_ip_tag_1.proposed.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-ansible_test_vrf"
          - cm_add_ip_tag_1.proposed.fvEpIpTag.attributes.ip == "1.1.1.1"
          - cm_add_ip_tag_1.proposed.fvEpIpTag.attributes.nameAlias == "TestIPTag"
          - nm_add_ip_tag_1 is changed
          - nm_add_ip_tag_1.current.0.fvEpIpTag.attributes.annotation == "orchestrator:ansible"
          - nm_add_ip_tag_1.current.0.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - nm_add_ip_tag_1.current.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-ansible_test_vrf"
          - nm_add_ip_tag_1.current.0.fvEpIpTag.attributes.ip == "1.1.1.1"
          - nm_add_ip_tag_1.current.0.fvEpIpTag.attributes.name == ""
          - nm_add_ip_tag_1.current.0.fvEpIpTag.attributes.nameAlias == "TestIPTag"
          - nm_add_ip_tag_1.previous == []
          - nm_add_ip_tag_1_again is not changed
          - nm_add_ip_tag_1_again.current.0.fvEpIpTag.attributes.annotation == "orchestrator:ansible"
          - nm_add_ip_tag_1_again.current.0.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - nm_add_ip_tag_1_again.current.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-ansible_test_vrf"
          - nm_add_ip_tag_1_again.current.0.fvEpIpTag.attributes.ip == "1.1.1.1"
          - nm_add_ip_tag_1_again.current.0.fvEpIpTag.attributes.name == ""
          - nm_add_ip_tag_1_again.current.0.fvEpIpTag.attributes.nameAlias == "TestIPTag"
          - nm_add_ip_tag_1_again.previous.0.fvEpIpTag.attributes.annotation == "orchestrator:ansible"
          - nm_add_ip_tag_1_again.previous.0.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - nm_add_ip_tag_1_again.previous.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-ansible_test_vrf"
          - nm_add_ip_tag_1_again.previous.0.fvEpIpTag.attributes.ip == "1.1.1.1"
          - nm_add_ip_tag_1_again.previous.0.fvEpIpTag.attributes.name == ""
          - nm_add_ip_tag_1_again.previous.0.fvEpIpTag.attributes.nameAlias == "TestIPTag"

    - name: Add IP Tag Object - 2 with same vrf and different ip address
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "2.2.2.2"
        vrf: ansible_test_vrf
        state: present
      register: add_ip_tag_2

    - name: Add IP Tag Object -3 with same ip address and different vrf
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "1.1.1.1"
        vrf: default
        state: present
      register: add_ip_tag_3

    - name: Assertion check for add IP Tag Objects with different combinations
      ansible.builtin.assert:
        that:
          - add_ip_tag_2 is changed
          - add_ip_tag_2.current.0.fvEpIpTag.attributes.annotation == "orchestrator:ansible"
          - add_ip_tag_2.current.0.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - add_ip_tag_2.current.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[2.2.2.2]-ansible_test_vrf"
          - add_ip_tag_2.current.0.fvEpIpTag.attributes.ip == "2.2.2.2"
          - add_ip_tag_2.previous == []
          - add_ip_tag_3 is changed
          - add_ip_tag_3.current.0.fvEpIpTag.attributes.annotation == "orchestrator:ansible"
          - add_ip_tag_3.current.0.fvEpIpTag.attributes.ctxName == "default"
          - add_ip_tag_3.current.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-default"
          - add_ip_tag_3.current.0.fvEpIpTag.attributes.ip == "1.1.1.1"
          - add_ip_tag_3.previous == []

    # UPDATE
    - name: Update IP Tag Object - 1 annotation, name_alias (check_mode)
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "1.1.1.1"
        vrf: ansible_test_vrf
        name_alias: Updated_TestIPTag
        annotation: annotation
        state: present
        output_level: debug
      check_mode: true
      register: cm_update_ip_tag_1

    - name: Update IP Tag Object - 1 annotation, name_alias
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "1.1.1.1"
        vrf: ansible_test_vrf
        name_alias: Updated_TestIPTag
        annotation: annotation
        state: present
      register: nm_update_ip_tag_1

    - name: Update IP Tag Object - 1 annotation, name_alias again
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "1.1.1.1"
        vrf: ansible_test_vrf
        name_alias: Updated_TestIPTag
        annotation: annotation
        state: present
      register: nm_update_ip_tag_1_again

    - name: Assertion check for update IP Tag Object - 1 annotation, name_alias
      ansible.builtin.assert:
        that:
          - cm_update_ip_tag_1 is changed
          - cm_update_ip_tag_1.current.0.fvEpIpTag.attributes.annotation == "orchestrator:ansible"
          - cm_update_ip_tag_1.current.0.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - cm_update_ip_tag_1.current.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-ansible_test_vrf"
          - cm_update_ip_tag_1.current.0.fvEpIpTag.attributes.ip == "1.1.1.1"
          - cm_update_ip_tag_1.current.0.fvEpIpTag.attributes.nameAlias == "TestIPTag"
          - cm_update_ip_tag_1.previous.0.fvEpIpTag.attributes.annotation == "orchestrator:ansible"
          - cm_update_ip_tag_1.previous.0.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - cm_update_ip_tag_1.previous.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-ansible_test_vrf"
          - cm_update_ip_tag_1.previous.0.fvEpIpTag.attributes.ip == "1.1.1.1"
          - cm_update_ip_tag_1.previous.0.fvEpIpTag.attributes.nameAlias == "TestIPTag"
          - nm_update_ip_tag_1 is changed
          - nm_update_ip_tag_1.current.0.fvEpIpTag.attributes.annotation == "annotation"
          - nm_update_ip_tag_1.current.0.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - nm_update_ip_tag_1.current.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-ansible_test_vrf"
          - nm_update_ip_tag_1.current.0.fvEpIpTag.attributes.ip == "1.1.1.1"
          - nm_update_ip_tag_1.current.0.fvEpIpTag.attributes.nameAlias == "Updated_TestIPTag"
          - nm_update_ip_tag_1.previous.0.fvEpIpTag.attributes.annotation == "orchestrator:ansible"
          - nm_update_ip_tag_1.previous.0.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - nm_update_ip_tag_1.previous.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-ansible_test_vrf"
          - nm_update_ip_tag_1.previous.0.fvEpIpTag.attributes.ip == "1.1.1.1"
          - nm_update_ip_tag_1.previous.0.fvEpIpTag.attributes.nameAlias == "TestIPTag"
          - nm_update_ip_tag_1_again is not changed
          - nm_update_ip_tag_1_again.current.0.fvEpIpTag.attributes.annotation == "annotation"
          - nm_update_ip_tag_1_again.current.0.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - nm_update_ip_tag_1_again.current.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-ansible_test_vrf"
          - nm_update_ip_tag_1_again.current.0.fvEpIpTag.attributes.ip == "1.1.1.1"
          - nm_update_ip_tag_1_again.current.0.fvEpIpTag.attributes.nameAlias == "Updated_TestIPTag"
          - nm_update_ip_tag_1_again.previous.0.fvEpIpTag.attributes.annotation == "annotation"
          - nm_update_ip_tag_1_again.previous.0.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - nm_update_ip_tag_1_again.previous.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-ansible_test_vrf"
          - nm_update_ip_tag_1_again.previous.0.fvEpIpTag.attributes.ip == "1.1.1.1"
          - nm_update_ip_tag_1_again.previous.0.fvEpIpTag.attributes.nameAlias == "Updated_TestIPTag"

    # QUERY
    - name: Query IP Tag Object with ip and vrf
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "2.2.2.2"
        vrf: ansible_test_vrf
        state: query
      register: query_with_ip_and_vrf

    - name: Query IP Tag Object with only vrf
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        vrf: default
        state: query
      register: query_with_vrf

    - name: Query IP Tag Object with only ip
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        ip: "1.1.1.1"
        state: query
      register: query_with_ip

    - name: Query all existing Endpoint IP Tags after the test
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        state: query
      register: query_all_ip_tags_1

    - name: Negative test - query IP Tag Object with ip and vrf
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "2.2.2.2"
        vrf: default
        state: query
      register: nt_query_ip_tag

    - name: Assertion check for query an Endpoint IP Tag Objects
      ansible.builtin.assert:
        that:
          - query_with_ip_and_vrf is not changed
          - query_with_ip_and_vrf.current.0.fvEpIpTag.attributes.annotation == "orchestrator:ansible"
          - query_with_ip_and_vrf.current.0.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - query_with_ip_and_vrf.current.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[2.2.2.2]-ansible_test_vrf"
          - query_with_ip_and_vrf.current.0.fvEpIpTag.attributes.ip == "2.2.2.2"
          - query_with_vrf is not changed
          - query_with_vrf.current | length >= 1
          - query_with_ip is not changed
          - query_with_ip.current | length >= 2
          - query_all_ip_tags_1 is not changed
          - query_all_ip_tags_1.current != []
          - query_all_ip_tags_1.current | length >= 3
          - "'uni/tn-ansible_test/eptags/epiptag-[2.2.2.2]-ansible_test_vrf' in query_all_ip_tags_1.current | map(attribute='fvEpIpTag.attributes.dn') | list"
          - "'uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-ansible_test_vrf' in query_all_ip_tags_1.current | map(attribute='fvEpIpTag.attributes.dn') | list"
          - "'uni/tn-ansible_test/eptags/epiptag-[1.1.1.1]-default' in query_all_ip_tags_1.current | map(attribute='fvEpIpTag.attributes.dn') | list"
          - nt_query_ip_tag is not changed
          - nt_query_ip_tag.current == []

    # DELETE
    - name: Remove IP Tag Object with ip and vrf (check_mode)
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "2.2.2.2"
        vrf: ansible_test_vrf
        state: absent
      check_mode: true
      register: cm_rm_with_ip_and_vrf

    - name: Remove IP Tag Object with ip and vrf
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "2.2.2.2"
        vrf: ansible_test_vrf
        state: absent
      register: nm_rm_with_ip_and_vrf

    - name: Remove IP Tag Object with ip and vrf again
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "2.2.2.2"
        vrf: ansible_test_vrf
        state: absent
      register: nm_rm_with_ip_and_vrf_again

    - name: Negative test - remove IP Tag Object with ip and vrf
      cisco.aci.aci_endpoint_tag_ip:
        <<: *aci_info
        tenant: ansible_test
        ip: "2.2.2.2"
        vrf: default
        state: absent
      register: nt_rm_ip_tag

    - name: Assertion check for remove an Endpoint IP Tag Object
      ansible.builtin.assert:
        that:
          - cm_rm_with_ip_and_vrf is changed
          - cm_rm_with_ip_and_vrf.current.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[2.2.2.2]-ansible_test_vrf"
          - cm_rm_with_ip_and_vrf.previous.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[2.2.2.2]-ansible_test_vrf"
          - nm_rm_with_ip_and_vrf is changed
          - nm_rm_with_ip_and_vrf.previous.0.fvEpIpTag.attributes.annotation == "orchestrator:ansible"
          - nm_rm_with_ip_and_vrf.previous.0.fvEpIpTag.attributes.ctxName == "ansible_test_vrf"
          - nm_rm_with_ip_and_vrf.previous.0.fvEpIpTag.attributes.dn == "uni/tn-ansible_test/eptags/epiptag-[2.2.2.2]-ansible_test_vrf"
          - nm_rm_with_ip_and_vrf.previous.0.fvEpIpTag.attributes.ip == "2.2.2.2"
          - nm_rm_with_ip_and_vrf.previous.0.fvEpIpTag.attributes.name == ""
          - nm_rm_with_ip_and_vrf.previous.0.fvEpIpTag.attributes.nameAlias == ""
          - nm_rm_with_ip_and_vrf_again is not changed
          - nm_rm_with_ip_and_vrf_again.current == []
          - nm_rm_with_ip_and_vrf_again.previous == []
          - nt_rm_ip_tag is not changed
          - nt_rm_ip_tag.current == []

    # CLEAN ENVIRONMENT
    - name: Ensure ansible_test tenant not exists
      cisco.aci.aci_tenant:
        <<: *aci_info
        tenant: ansible_test
        state: absent
